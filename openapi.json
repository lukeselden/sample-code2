{
  "openapi": "3.0.1",
  "info": {
    "title": "Rev REST APIs",
    "description": "Rev API is the primary means for developers to access, create and modify resources in Rev. Apps can read and write to the resources and mirror some of the most popular features available in Rev Web Portal such as uploading and editing videos, creating, editing, and starting webcasts, adding and removing users and groups, viewing reports and much more using the Rev API. Depending on your app’s use case, you can choose from our various APIs and implement the features accordingly.</br>All Rev APIs are based on REST architecture and are accessed via HTTPS. The complete URL is based on your Rev tenant URL and varies depending on the endpoint of the resource being accessed. For instance, you can access a user based on Rev User ID vai a a GET request to this URL: https://YOUR_REV_TENANT_URL/api/v2/users/userId.</br>Please make sure that you are familiar with the authentication and authorization approaches for Rev APIs.",
    "version": "2.0.0"
  },
  "x-explorer-enabled": false,
  "x-samples-languages": [
    "curl",
    "node",
    "java",
    "csharp",
    "ruby",
    "python"
  ],
  "servers": [
    {
      "url": "https://YOUR_REV_TENANT_URL"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication tagging description."
    },
    {
      "name": "Videos",
      "description": "Videos"
    },
    {
      "name": "Playlists",
      "description": "Playlists"
    },
    {
      "name": "Webcasts",
      "description": "Webcasts"
    },
    {
      "name": "Users & Groups",
      "description": "User & Groups"
    },
    {
      "name": "Channels",
      "description": "Channels"
    },
    {
      "name": "Administration",
      "description": "Administration"
    },
    {
      "name": "Devices",
      "description": "Devices"
    },
    {
      "name": "Audit",
      "description": "Audit Details"
    }
  ],
  "paths": {
    "/api/v2/authenticate": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Login API Key",
        "description": "This authentication API endpoint is used to authenticate individual user using user’s pre-generated API Key and Secret. Use the token that is returned in the response as the Authorization to run other public APIs. Once a session is established using this endpoint, subsequent API calls that uses the token returned from this endpoint will be limited according to the role and privileges of this particular user. Using this method, the user via API will have the same privileges and roles that user has when they login to Rev UI. This authentication mechanism can be used to automate Rev workflows using role and privileges of a given user.</br></br>Account Admins can generate user’s API Key and Secret combination. Secret is only visible at the time of generation. API Key and Secret combination can be regenerated and deleted. The key will not work for suspended users. Also authenticating a user using this method will consume a user license if the user is unlicensed",
        "operationId": "authenticateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginRequestAPIKey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authenticationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "secret"
      }
    },
    "/api/v2/auth/extend-session-timeout/{apiKey}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Extend API Key Session",
        "description": "This endpoint extends the current user API key session by preventing it from timing out. Successful completion returns a new expiration date and time which then expires the session at that new date and time.",
        "operationId": "extendApikeySessionTimeout",
        "parameters": [
          {
            "name": "apiKey",
            "in": "path",
            "description": "ApiKey of the user extending the session timeout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extendSessionTimeoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/tokens/{apiKey}": {
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Revoke API Key Session",
        "description": "This endpoint revokes the current user API key session.",
        "operationId": "revokeToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "apiKey",
            "in": "path",
            "description": "ApiKey of the user revoking the token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Login",
        "description": "Establish session via Username login.",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "password"
      }
    },
    "/api/v2/user/extend-session-timeout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Extend User Login Session",
        "description": "This endpoint extends the current session by preventing it from timing out. Successful completion returns a new expiration date and time which expires the session at that new date and time.",
        "operationId": "extendSessionTimeout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/extendSessionTimeoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userId"
      }
    },
    "/api/v2/oauth/authorization": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "OAuth Authorization",
        "description": "Successful invocation of this API results in the user being redirected to the URL specified in the redirect_uri parameter.",
        "operationId": "authorization",
        "parameters": [
          {
            "name": "apiKey",
            "in": "query",
            "description": "ApiKey obtained after registering the app in Rev",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signature",
            "in": "query",
            "description": "This is a base 64 encoded string computed from the hash generated by signing verifier (below) using HMAC SHA 256 algorithm. It uses ApiKey secret as the key for signing. This is to make sure that the API sending the request has the right secret key and it has not been compromised.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "in": "query",
            "description": "This is required and value <em>must</em> be set to <code>code</code>. Note this is also case sensitive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "This determines where to send the response",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "This is any state that the consumer wants to reflect back to it after approval. This is optional and the value must be url encoded.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verifier",
            "in": "query",
            "description": "This is a combination of Apikey and current timestamp in UTC (<code>Apikey::Timestamp</code>) that is used for verifying the authorization request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response<p>After validating the ApiKey and signature, user is redirected back to login page with a reference to the redirect Uri. Once the user provides credentials, user is asked to grant access permissions to the client application.</p><p>If the user accepts, user is redirected back to the redirect URl provided along with an authorization code as a query parameter.</p><p>If the user denies access to the application, user is redirected to the URL but with an error query parameter.</p>",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/oauth/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "OAuth Access Token",
        "description": "Obtains the access token that identifies the Rev user that granted access to the client.",
        "operationId": "token",
        "requestBody": {
          "description": "This contains the details required to generate accessToken",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accessTokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "AccessTokenRequest"
      }
    },
    "/api/v2/user/session": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Checks User Session",
        "description": "Checks user session health for the provided authorization header.",
        "operationId": "getUserSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/user/logoff": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User Logoff",
        "description": "This endpoint ends the login session. The userId value (provided in the login endpoint response) identifies the user who is logging out.",
        "operationId": "logOff",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userId"
      }
    },
    "/api/v2/uploads/videos": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video",
        "description": "Uploads a supported video format. A full list of <a href=/docs/supported-video-and-audio-formats>supported video formats</a> can be found in the Technical Requirements guide.",
        "operationId": "uploadvideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Video",
                  "VideoFile"
                ],
                "properties": {
                  "Video": {
                    "description": "Video metadata object. Field name is video.",
                    "$ref": "#/components/schemas/videometadata"
                  },
                  "VideoFile": {
                    "type": "string",
                    "description": "Video file to upload.<p>Video file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#video.</p><p>Please provide Content-Type header for the uploaded video file.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request</br></br>Incorrect value for videoAccessControl",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error<p>uploader not specified or username does not exist in Rev</p><p>categoryIds incorrect or do not exist in Rev</p><p>customField does not exist in Rev or picklist values incorrect</p><p>publishDate format incorrect. Must be YYYY-MM-DD</p>",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Details/Metadata",
        "description": "This endpoint is used to set or modify all metadata fields for a specific video. Note that if you are only changing one field (categories for example) <em>all</em> other metadata fields must also be submitted with this API call. Otherwise, those values that are not set are reset to defaults or nullified entirely.<p>To edit specific fields instead of all fields, use the <a href=/reference/migratevideo>Migrate Video</a> and/or <a href=/reference/editvideoaccesscontrol>Edit Video Access Control</a> endpoints instead.</p>",
        "operationId": "editVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Videos details to update. customFields note: If custom metadata field is marked required, it must be provided in API call, otherwise it is optional.If it is required and not provided, the upload is rejected.Picklist types must be valid.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/videoDetailEdit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "patch": {
        "tags": [
          "Videos"
        ],
        "summary": "Patch Video Details/Metadata",
        "description": "Partially edits the metadata details of a video. You do not need to provide the fields that are not changing.<p>Operations supported: add,remove,copy,replace,test,move.<p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><strong>Examples:</strong><p>using categories: [{'op': 'add', 'path': '/Categories/0', 'value': '03846100-96ac-4628-bbe3-b23a0df1081d' }]</p><p>using accessControlEntities: [{ 'op': 'replace', 'path': '/accessControlEntities/0/CanEdit', 'value': 'false' }]</p><p>Non-Editable fields [Id,ApprovalStatus,UploadedBy,WhenUploaded,LastViewed] are ignored.</p></p>",
        "operationId": "editVideoPatch",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Videos details to update. Please refer to http://jsonpatch.com/ for the format of the request body.Patch operations on Video Non-Editable fields [Id,ApprovalStatus,UploadedBy,WhenUploaded,LastViewed] will be ignored.Operations supported: add,remove,copy,replace,test,move.Add operation:  {\"op\": \"add\", \"path\": \"/Categories/0\", \"value\": \"03846100-96ac-4628-bbe3-b23a0df1081d\" }.Replace operation:{ \"op\": \"replace\", \"path\": \"/accessControlEntities/0/CanEdit\", \"value\": \"false\" }",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "409": {
            "description": "Conflict error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video",
        "description": "This endpoint deletes a video asset from Rev. This includes videos stored on a DME.",
        "operationId": "deleteVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/access-control": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Access Control",
        "description": "This endpoint edits the Access Control permissions on a specific video.<p>Allows Access Control entities to be set for all four types. Note that if set to <b>Public</b>, the Public setting must first be enabled on the Rev account and a password may then be set if desired. If set to <b>Channels</b>, there should be one valid Channel in the account, otherwise the request is rejected. The default setting is <b>Private</b>.</p>",
        "operationId": "editVideoAccessControl",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to modify access to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video Access Control Request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/accessControlEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Password"
      }
    },
    "/api/v2/videos/{videoId}/details": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Details/Metadata",
        "description": "Retrieves video details and metadata of a given video.",
        "operationId": "getVideosDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/videoDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Status",
        "description": "This endpoint retrieves the current status of a specific video during upload and when upload is complete. To know whether a video is fully processed, including transcoding, use the field <b>isProcessing</b> along with with <b>status</b> state that is returned in the response. <p>For example, if the value of <b>isProcessing</b> is FALSE and the status is <b>Ready</b>, then the video has been fully processed. If the value of <b>isProcessing</b> is TRUE and status is <b>Ready</b>, then it means the video is available for playback but the transcoding process is still in progress.</p><p>The progress of the overall processing of the video can be tracked using the field <b>overallProgress</b> whose value ranges from 0.0 to 1.0 where 1.0 means that the processing is 100% completed.</p><p>Possible status states during upload: [NotUploaded, Uploading, UploadingFinished, Ingesting, Processing]</p><p>Possible final status states once upload is complete: [Canceled, UploadFailed, ProcessingFailed, Ready, ReadyButProcessingFailed]</p>",
        "operationId": "getVideoStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to retrieve status state",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/playback-url": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Playback",
        "description": "This endpoint retrieves a playback URL and thumbnail URL for a given video. Note that the playback URL is used for embedding purposes only and is <em>not</em> a direct link to the video file itself.",
        "operationId": "getVideoPlaybackUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoPlaybackUrl"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/videos/{videoId}": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Replace Video",
        "description": "This endpoint replaces a given video with one that you upload.",
        "operationId": "replaceVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to replace",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video file to upload.<p>Video file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#video</p><p>Please provide Content-Type header for the uploaded video file.</p>",
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "VideoFile"
                ],
                "properties": {
                  "VideoFile": {
                    "type": "string",
                    "description": "Video file to upload. <p>Video file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#video.</p><p>Please provide Content-Type header for the uploaded video file.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "VideoFile"
      }
    },
    "/api/v2/uploads/images/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Thumbnail",
        "description": "Uploads an alternate image to be used as a thumbnail for a specified video. Rev auto-generates a default thumbnail if you do not upload one of your choice. Note that if you replace Rev’s auto-generated thumbnail with one that you upload it will be deleted and may <em>not</em> be recovered.",
        "operationId": "uploadthumbnailfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ThumbnailFile"
                ],
                "properties": {
                  "ThumbnailFile": {
                    "type": "string",
                    "description": "Thumbnail image file.<p>Accepted file types: [.jpg, .png, .gif]</p><p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/media/videos/thumbnails/{key}": {
      "head": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Thumbnail",
        "description": "Get the video thumbnail file header info. The <strong>HEAD</strong> method is a pre-flight query that returns the size and mime-type to be added to the response Headers.",
        "operationId": "headVideoThumbnailFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the video thumbnail to download.<p>Obtained via the <a href=/reference/getvideosdetails>Get Video Metadata</a> endpoint and the <b>thumbnailKey</b> property that is returned.</p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video Thumbnail",
        "description": "Downloads the video thumbnail image file if the oembed functionality is enabled. If oembed is not enabled, access to the thumbnail is determined by the video view rights.",
        "operationId": "downloadVideoThumbnailFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "key",
            "in": "path",
            "description": "File key of the video thumbnail to download.<p>Obtained via the <a href=/reference/getvideosdetails>Get Video Metadata</a> endpoint and the <b>thumbnailKey</b> property that is returned.</p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/uploads/chapters/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Chapters",
        "description": "This endpoint uploads a chapter(s) for a specified video. Posting chapters replaces <em>all</em> existing chapters a video contains. There can be multiple chapter titles and start times. The endpoint requires the user have edit rights to the video.",
        "operationId": "uploadVideoChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload chapters to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Chapters",
                  "File"
                ],
                "properties": {
                  "Chapters": {
                    "$ref": "#/components/schemas/videoChaptersMetadata"
                  },
                  "File": {
                    "description": "Video chapter image file(s) to upload. <p>Video chapter image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type and Content-Disposition headers for the uploaded image file(s). The filename(s) should match the <code>imageFile</code>s specified in the Chapters json payload</p>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Chapters",
        "description": "This endpoint uploads and edits a chapter(s) for a specified video. Using the <strong>PUT</strong> method (editing) chapters <em>replaces</em> an existing chapter if it is a duplicate timestamp. <p>New chapters are created if the chapter does not exist at the specified timestamp. There can be multiple chapter titles and start times.</p><p>The endpoint requires the user have edit rights to the video.</p>",
        "operationId": "uploadVideoChaptersUpdate",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload chapters to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Chapters",
                  "File"
                ],
                "properties": {
                  "Chapters": {
                    "$ref": "#/components/schemas/videoChaptersMetadata"
                  },
                  "File": {
                    "type": "string",
                    "description": "Video chapter image file to upload. <p>Video Chapter image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type and Content-Disposition headers for the uploaded image file(s). The filename(s) should match the <code>imageFile</code>s specified in the Chapters json payload</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/chapters": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Chapters",
        "description": "Returns all video chapters that have been uploaded for a given video.",
        "operationId": "getVideosChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to get chapters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/videoChapters"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request</br>video id does not exist</br>video does not have chapters"
          },
          "401": {
            "description": "Unauthorized error</br>user does not have view rights</br>user not a system user"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Videos"
        ],
        "summary": "Delete Video Chapters",
        "description": "Deletes all (or specified) video chapters that have been uploaded for a given video.",
        "operationId": "deleteVideoChapters",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "List of video chapter start time(s) (comma delimited) to delete. An empty value means to delete <em>all</em> chapters associated to the video.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/supplemental-files/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Supplemental Files",
        "description": "This endpoint uploads one or more supplemental files to associate with a specified video. Typical file types include PowerPoint and PDF documents that provide a viewer with additional information.",
        "operationId": "upload-supplemental-files",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to upload supplemental files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "Files",
                  "SupplementalFiles"
                ],
                "properties": {
                  "Files": {
                    "type": "array",
                    "description": "Supported <a href=/docs/supported-file-types>Supplemental File</a> types you may upload are found in the Technical Requirements guides.<p>Please provide Content-Type header for each file you upload.</p>",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "SupplementalFiles": {
                    "description": "Supplemental files metadata object.  Field name is SupplementalFiles.",
                    "$ref": "#/components/schemas/SupplementFilesDetails"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "<p>Internal server error</p><p>Errors may include:</p><p>MalformedRequest = Bad request format. Please check your request</p><p>FileNotSupported = Sorry! Cannot upload this file type.</p><p>FileNotSent = The video file was not uploaded.</p><p>UserNotProvided = Unable to upload video. Please ensure that video is associated to a valid user.</p><p>UserDoesNotExist = Unable to upload video. Please ensure that video is associated to a valid user.</p><p>InternalServerError = Unable to process request at this time. Please try again later.</p>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "SupplementalFiles"
      }
    },
    "/api/v2/videos/{videoId}/supplemental-files": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Supplemental Files",
        "description": "Retrieve the supplemental files of a video. This endpoint requires view access and returns a blank array if there are no supplemental files associated to the video.",
        "operationId": "getVideoSupplementalFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get the supplemental files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplementalFilesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/supplemental-files/{fileId}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video Supplemental File",
        "description": "Downloads a supplemental file based on the video and file Id provided. This endpoint requires view rights for the video.",
        "operationId": "downloadVideoSupplementalFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "File Id of the video's supplemental file to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error <p>Returned if videoId not valid</p>"
          },
          "404": {
            "description": "Resource not found <p>Returned if videoId or fileId not provided</p><p>Returned if no fileId with that name</p>"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/uploads/transcription-files/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Closed Caption",
        "description": "Uploads closed caption files for a video for hearing impaired viewers. Only .srt or .vtt files are supported.",
        "operationId": "uploadtranscriptionfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to set transcription files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File",
                  "TranscriptionFiles"
                ],
                "properties": {
                  "File": {
                    "type": "array",
                    "description": "Transcription files. <p>Please provide Content-Type header for the uploaded files.</p><p>Accepted values are <code>text/plain</code> or <code>application/octetstream</code></p>",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  },
                  "TranscriptionFiles": {
                    "$ref": "#/components/schemas/TranscriptionFilesDetails"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "TranscriptionFiles"
      }
    },
    "/api/v2/uploads/video-presentations/{videoId}": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Upload Video Presentation Chapters",
        "description": "This endpoint uploads a PowerPoint presentation to create chapters for a specified video. <p>Posting chapters replaces <em>all</em> existing chapters a video contains. The first slide begins at 00:00:00 with the rest evenly distributed throughout the duration of the video. The slide titles are the names of the chapter titles. If there are slides without titles, the slide number is the title. The endpoint requires the user have edit rights to the video.</p>",
        "operationId": "uploadPresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to set presentation chapters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "PresentationFile"
                ],
                "properties": {
                  "PresentationFile": {
                    "type": "string",
                    "description": "Presentation File. <p>Please provide Content-Type header for the uploaded files. Accepted values are text/plain or application/octetstream</p>",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/webcast-branding/{eventId}": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Webcast Branding",
        "description": "This endpoint uploads and updates a webcast branding settings for a specified webcast. <p>The endpoint requires the user have edit rights to the webcast.</p>",
        "operationId": "uploadWebcastBranding",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to set the branding",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "LogoImageFile",
                  "BackgroundImageFile",
                  "Branding"
                ],
                "properties": {
                  "LogoImageFile": {
                    "type": "string",
                    "description": "Logo Image File. <p>Logo image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type header for the uploaded image file.</p>",
                    "format": "binary"
                  },
                  "BackgroundImageFile": {
                    "type": "string",
                    "description": "Background Image File. <p>Background image image file content type must match with list at location http://www.iana.org/assignments/media-types/media-types.xhtml#image.</p><p>Please provide Content-Type header for the uploaded image file.</p>",
                    "format": "binary"
                  },
                  "Branding": {
                    "$ref": "#/components/schemas/webcastBrandingDetails"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/presentation-status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Presentation Chapter Status",
        "description": "Retrieves the status of all presentation file chapters that have been uploaded for a specified video.<p>Status return values can be [Initialized, InProgress, Completed, Error]</p>",
        "operationId": "getVideoPresentationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get the presentation chapter status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoPresentationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/rating": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Rating",
        "description": "This endpoint is used to submit a numerical rating on a specified video.",
        "operationId": "submitVideoRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to set rating",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rating of video. Example, rating=4.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rating"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "rating"
      }
    },
    "/api/v2/videos/{videoId}/comment": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Update Video Comments",
        "description": "This endpoint is used to submit a comment on a specified video. The username that submits the comment must exist in Rev.",
        "operationId": "submitComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to submit comments for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body to be submitted",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/commentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Request body"
      }
    },
    "/api/v2/videos/{videoId}/comments": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Comments",
        "description": "Returns list of comments for a given video.",
        "operationId": "getVideoComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get comments",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/videocomments"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcode-on-demand": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Transcode Video",
        "description": "Transcode video on-demand with new presets. This endpoint bypasses the need to upload the video again.",
        "operationId": "transcodeVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to transcode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/search": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Search Videos",
        "description": "This endpoint mimics the search control in the Rev portal. All results are based on the authenticated user making the API request.",
        "operationId": "searchVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of video (Live/Vod)",
            "schema": {
              "type": "string",
              "enum": [
                "live",
                "vod"
              ]
            }
          },
          {
            "name": "categories",
            "in": "query",
            "description": "List of Category Ids to specify searching videos only in those categories.<p>Example: <code>Categories=a0e5cbf6-95cb-46e7-8600-4c07bc31f80b, b1f5cbf6-95cb-46e7-8600-4c07bc31g9pc.</code></p><p> Pass a blank entry to return uncategorized videos. Example: <code>Categories=</code></p>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploaders",
            "in": "query",
            "description": "Include the first name and last name of the uploader.  Note that partial matches may be returned. Example: uploaders=\"john doe\" is going to retrieve all videos uploaded by the user with first name and last name = \"john doe\". To return an exact result you must use the uploaderIds query string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploaderIds",
            "in": "query",
            "description": "Uploader GUIDs to get specific videos uploaded by these users. Example: <code>UploaderIds=abc, xyz</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owners",
            "in": "query",
            "description": "Include the first name and last name of the owner.  Note that partial matches may be returned. Example: owners=\"john doe\" is going to retrieve all videos owned by the user with first name and last name = \"john doe\". To return an exact result you must use the ownerIds query string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ownerIds",
            "in": "query",
            "description": "Owner GUIDs to get specific videos owner by these users. Example: <code>ownerIds=abc, xyz</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of video (Active/Inactive)",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive"
              ]
            }
          },
          {
            "name": "fromPublishedDate",
            "in": "query",
            "description": "Valid video published date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toPublishedDate",
            "in": "query",
            "description": "Valid video published date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromUploadDate",
            "in": "query",
            "description": "Valid video upload date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUploadDate",
            "in": "query",
            "description": "Valid video upload date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "fromModifiedDate",
            "in": "query",
            "description": "Valid video modified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toModifiedDate",
            "in": "query",
            "description": "Valid video modified date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of videos to get. (By default count is 50)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "If totalVideos > count, then provide the scrollId returned from the first request to get the next set of videos like (<code>scrollId=abc</code>)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exactMatch",
            "in": "query",
            "description": "If true, search is performed as exact match on title, tags, categories, and uploader.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, query results are sorted based on field(title, whenUploaded, uploaderName, duration, _score). Default is set to title.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "If provided, query results are sorted on ascending or descending order(asc, desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unlisted",
            "in": "query",
            "description": "If provided, the query string fetches the unlisted setting of the video. This can be listed only, unlisted only, or to return all. Default setting fetches the listed only videos.",
            "schema": {
              "type": "string",
              "enum": [
                "listed",
                "unlisted",
                "all"
              ]
            }
          },
          {
            "name": "searchField",
            "in": "query",
            "description": "If provided, the query results are fetched on the provided searchField only. If the exactMatch flag is also set along with searchField, then the results are fetched for an exact match on the provided searchField only.",
            "schema": {
              "type": "string",
              "enum": [
                "title",
                "tags",
                "categories",
                "uploader"
              ]
            }
          },
          {
            "name": "includeTranscriptSnippets",
            "in": "query",
            "description": "If true, search results include inner hits from transcription files. Default is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "recommendedFor",
            "in": "query",
            "description": "Show recommended videos for the specified Username. Videos returned are based on the user’s last 10 viewed videos. Must be Account Admin or Media Admin to use this query. Sort order must be _score. User must exist.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Public Videos",
        "description": "Returns a list of public videos by category, status, and related metadata.",
        "operationId": "getVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "category",
            "in": "query",
            "description": "List of Category Ids to specify searching videos only in those categories.<p>Example: <code>Categories=a0e5cbf6-95cb-46e7-8600-4c07bc31f80b, b1f5cbf6-95cb-46e7-8600-4c07bc31g9pc.</code></p><p> Pass a blank entry to return uncategorized videos. Example: <code>Categories=</code></p>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/video"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Add Video Link",
        "description": "Creates a manually entered URL. Live and Stored video links are supported.",
        "operationId": "CreateVideoLink",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Video metadata object. For linkedUrl:Type=Live/Vod IsMulticast= true/false EncodingType= h264/hls/hds/h264ts/mpeg4/mpeg2/wm",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createLinkVideoMetadata"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoUploadResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Video"
      }
    },
    "/api/v2/videos/{videoId}/download": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video",
        "description": "This endpoint downloads a video asset from Rev. The original file upload is downloaded.",
        "operationId": "downloadVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/oembed": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video oEmbed",
        "description": "Gets oEmbed JSON data for a given video for video embedding. This is typically used for integrations into other social systems with activity feeds so users can watch video inline of an activity feed.<p>This API does not require an authorization header.</p>",
        "operationId": "oembed",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Rev URL of video to embed must be <code>URL (Percent) Encoded</code>. Please refer to https://en.wikipedia.org/wiki/Percent-encoding for details.  <p>Example:</p><p>Url: https://myRevURL.vbrick.com/#/videos/5e0625da-d2a0-45d7-a221-deb49b9623ab</p><p>Encoded Url: <code>https%3A%2F%2FmyRevURL.vbrick.com%2F%23%2Fvideos%2F5e0625da-d2a0-45d7-a221-deb49b9623ab</code></p>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of video to embed",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of video to embed",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "autoplay",
            "in": "query",
            "description": "Set if video autoplays on load",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oembedVideo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcription": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Transcribe Video",
        "description": "This endpoint selects a transcription integration and generates a transcription file for a specified video.",
        "operationId": "transcribeVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to transcribe",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video to transcribe using the language and service type in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transcriptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transcriptionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/videos/{videoId}/transcriptions/{transcriptionId}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Transcription Status",
        "description": "Get the status of a video transcription.",
        "operationId": "getVideoTranscriptionStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transcriptionId",
            "in": "path",
            "description": "Transcription Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/videoTranscriptionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcription-files/{languageId}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Download Video Transcription File",
        "description": "Downloads a video transcription file.",
        "operationId": "downloadVideoTranscriptionFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageId",
            "in": "path",
            "description": "Language Id of the video transcription to download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/translations": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Translate Video",
        "description": "Translates a specified video. You must include both the source language and an array of target languages to translate the source language to.",
        "operationId": "translateVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to translate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video to translate using the source language and target languages in the request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/v2/videos/{videoId}/translations/{language}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Translation Status",
        "description": "Get status of a video translation.",
        "operationId": "getVideoTranslationStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "in": "path",
            "description": "language Id of video to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translationStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/transcription-files": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Transcription Files",
        "description": "Get transcription files of a video.",
        "operationId": "getVideoTranscriptionFiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get the transcription files",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transcriptionFilesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/user-tags": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Tag Users in Video",
        "description": "This endpoint sends a video for Facial Recognition and tags the user accounts recognized in the video. The Rev account must have <a href=/docs/facial-recognition>Facial Recognition</a> activated and the user account must be enabled for recognition (i.e., profile not opted out and have a recognizable profile picture uploaded).",
        "operationId": "tagUsersInVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to use in tagging users",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request<p>This account has insufficient Rev IQ credits to complete the action.</p><p>Video is too large for user tagging.</p><p>Video codec or container is incorrect.</p>",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error<p>Rev IQ/Facial Recognition is not enabled for this account.</p><p>Insufficient rights to this video. You do not have edit rights.</p>",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/user-tags/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get User Tag Status in Video",
        "description": "Get tagging status of users in a video.<p>Possible status states include: [InProgress, Failed, Finished]",
        "operationId": "getVideoTaggingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of the video to use in tagging users",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "videoId": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "userTagsStatus": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        },
                        "errorCode": {
                          "type": "string"
                        },
                        "errorMessage": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/approval/templates": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Approval Processes List",
        "description": "Gets a list of previously created approval processes for a user. This endpoint is for the user that is authenticated to Rev making this API call.",
        "operationId": "getApprovalProcess",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/approvalTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{id}/approval/submitted/{templateId}": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Send Video for Approval",
        "description": "Submits a video for approval to an approver.",
        "operationId": "sendVideoApproval",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of video to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Id of approval process template used to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/approval/pending": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Videos Pending Approval",
        "description": "Get a list of videos pending approval from an approver.",
        "operationId": "getPendingApprovalVideos",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of videos to get. Should not exceed 250 for better performance (By default count is 50)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/pendingVideos"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{id}/approval/approved": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Approve Video",
        "description": "Approve a specified video.",
        "operationId": "approveVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of video to approve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for approving the video"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{id}/approval/rejected": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Reject Video",
        "description": "Reject a video approval.",
        "operationId": "rejectVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of video to reject",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reason": {
                    "type": "string",
                    "description": "Reason for rejecting the video"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/vc/start-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Start Video Conference Recording",
        "description": "Video Conference endpoints allow you to record SIP-based video conference meetings and store/modify/search the resulting VOD videos in Rev. The VC endpoints are available only with a Rev-Cloud subscription.<p>Refer to <a href=/docs/video-conference-vc-integrations>Video Conference (VC)Integrations</a> for supported endpoints.</p><p>This endpoint starts a video conference recording. A SIP address and account access to the video conference recording integration is required.</p>",
        "operationId": "startRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to start VC recording",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startVcRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/startVCRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startVcRecordingRequest"
      }
    },
    "/api/v2/vc/recording-status/{id}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Conference Recording Status",
        "description": "Get status of video conference recording.",
        "operationId": "recordingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of video to get status.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vCRecordingStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/vc/stop-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Stop Video Conference Recording",
        "description": "Stop a video conference recording.",
        "operationId": "stopRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to stop VC recording",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stopVCRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stopVCRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "stopVCRecordingRequest"
      }
    },
    "/api/v2/pp/start-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Start/Schedule Presentation Profile Recording",
        "description": "This endpoint starts or schedules a Presentation Profile recording. It does <em>not</em> reserve the source device or the recording device. It assumes that the source device is live and a recording device is available when the recording is scheduled to start.",
        "operationId": "startScheduledRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to start/schedule presentation profile recording",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/startScheduledRecordingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/startScheduledRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "startScheduledRecordingRequest"
      }
    },
    "/api/v2/pp/stop-recording": {
      "post": {
        "tags": [
          "Videos"
        ],
        "summary": "Stop/Cancel Presentation Profile Recording",
        "description": "This endpoint stops or cancels (if it has not started) a Webcast recording from a Presentation Profile. It requires the scheduledRecordingId returned from the Start/Schedule Recording endpoint.",
        "operationId": "stopScheduledRecording",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "This contains the details required to stop the presentation profile recording or cancel it if it's not started yet.",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "scheduledRecordingId"
                ],
                "properties": {
                  "scheduledRecordingId": {
                    "type": "string",
                    "description": "Recording Id that needs to be stopped or cancelled"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stopScheduledRecordingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "scheduledRecordingId"
      }
    },
    "/api/v2/pp/recording-status/{scheduledrecordingid}": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Presentation Profile Recording Status",
        "description": "Get the status of the presentation profile recording. Status responses include [Scheduled, Starting, Recording, Stopping, Failed, Cancelled].",
        "operationId": "scheduledRecordingStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "scheduledrecordingid",
            "in": "path",
            "description": "Id of the scheduled recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/scheduledRecordingStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/report": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Report",
        "description": "This endpoint returns detailed viewing information for one or more videos. The report includes individual video viewing sessions, along with information on whether each user completed the video.<p>If video Ids are not specified in the call, the response includes data for every video in your Rev account. Maximum duration for a reporting period is 31 days.",
        "operationId": "getVideoReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoIds",
            "in": "query",
            "description": "Id of video to return data for. If no Ids are specified, data for all videos in the system are returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "after",
            "in": "query",
            "description": "If after date is used, only video views with a start date <em>after</em> the specified date (up to 31 days) are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned, not exceeding 31 days. If <em>no</em> dates are specified, video views between the current date and 31 days in the past from the start date are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "If before date is used, only video views with a start date <em>before</em> the specified date (up to 31 days) are included in the response. If <em>both</em> dates are used, video views between the specified dates are returned, not exceeding 31 days. If <em>no</em> dates are specified, video views between the current date and 31 days in the past from the start date are returned.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/videoreport"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/users/{userId}/status": {
      "get": {
        "tags": [
          "Videos"
        ],
        "summary": "Get Video Watch Report",
        "description": "Get status on whether or not a specific user has completed watching a video.",
        "operationId": "userVideoCompletion",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user to get status for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userVideoCompletionStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/videos/{videoId}/migration": {
      "put": {
        "tags": [
          "Videos"
        ],
        "summary": "Migrate Video",
        "description": "This endpoint is used during migrations to Rev from another system. During video import, you may want to retain the original uploader, upload date, and publish date. As a result, this API allows you to set only these fields to do so.<p>You can also use this endpoint to edit only these fields for previously added videos in the system if needed. This avoids the requirement of setting all fields when using other video editing endpoints.</p>",
        "operationId": "migrateVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Id of video to migrate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Migration request of video. uploadedBy is the user name to update.whenUploaded is the upload date and time to update.Example: 2015-02-26 15:53:12",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/migrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "migrationRequest"
      }
    },
    "/api/v2/playlists": {
      "get": {
        "tags": [
          "Playlists"
        ],
        "summary": "Get Playlists",
        "description": "Get list of all playlists.",
        "operationId": "getPlaylists",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getPlaylists"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Playlists"
        ],
        "summary": "Add Playlist",
        "description": "Create a new playlist.",
        "operationId": "createPlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "videoIds"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the playlist. Must be unique."
                  },
                  "videoIds": {
                    "description": "Ids of videos to add to playlist. At least one video is required.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createPlaylist"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "videoIds"
      }
    },
    "/api/v2/playlists/{id}": {
      "put": {
        "tags": [
          "Playlists"
        ],
        "summary": "Update Playlist",
        "description": "Edit videos in a playlist.",
        "operationId": "editPlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of Playlist to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Video Ids to edit in the playlist and the action taken (add or remove).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistVideoDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "editPlaylistMembers"
      },
      "delete": {
        "tags": [
          "Playlists"
        ],
        "summary": "Delete Playlist",
        "description": "Deletes a playlist.",
        "operationId": "deletePlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of playlist to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/playlists/featured-playlist": {
      "put": {
        "tags": [
          "Playlists"
        ],
        "summary": "Update Featured Playlist",
        "description": "Edit the Rev Featured Playlist on the Home Page. You must have Account or Media Admin permissions.",
        "operationId": "editFeaturedPlaylist",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Video Ids to edit in the playlist and the action taken (add or remove).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaylistVideoDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "editPlaylistMembers"
      }
    },
    "/api/v2/scheduled-events": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcasts By Time Range",
        "description": "Gets a list of webcasts for a given time duration.",
        "operationId": "getEventsList",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "after",
            "in": "query",
            "description": "Events with an end date after specified date are included in the response. If date not included, this will by default be set to either 12 months prior to the before parameter, or the current date and time if before is not set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Events with a start date on or before specified date are included in the response. If date not included, this will by default be set to either 12 months after the after parameter, or 12 months from the current date and time if after is not set.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, the query results are sorted based on field(startDate, title). Default is set to startDate.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "If provided, the query results are sorted on ascending or descending order(asc, desc)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Create Webcast",
        "description": "Creates a new webcast.",
        "operationId": "createEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Event to add.Valid values for questionOption parameter are IDENTIFIED/SELFSELECT/ANONYMOUS",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createEditEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "event"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcasts By Custom Field or Date Range",
        "description": "This endpoint deletes all events for a given date range or custom field query. The response returns a jobId and a count of webcasts to be deleted. The jobId can be used to check the <a href=/reference/getdeletewebcastsjobstatus>status</a> of the deletion.",
        "operationId": "deleteEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Fields that are going to be used to search Webcasts that are to be deleted.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/deleteEventsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleteEventsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "event"
      }
    },
    "/api/v2/search/scheduled-events": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Search Webcasts By Custom Field or Date Range",
        "description": "This endpoint searches all events for a given date range or custom field query.",
        "operationId": "searchWebcasts",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Search pam",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/searchWebcastsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/searchWebcastsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Details",
        "description": "Get webcast settings and metadata details for a specified webcast.",
        "operationId": "getEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Webcast",
        "description": "Edit an existing webcast.",
        "operationId": "editEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event to update in the system. Valid values for questionOption parameter are IDENTIFIED/SELFSELECT/ANONYMOUS",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "event"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast",
        "description": "Delete a webcast.",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Patch Webcast",
        "description": "Partially edits the details of a webcast. You do not need to provide the fields that you are not changing.<p>Webcast <strong>status</strong> determines which fields are modifiable and when. <p>If the webcast pre-production or main event is <strong>in progress</strong>, only fields available for inline editing may be patched/edited.</p><p>If the webcast main event has been run once, only fields available <strong>after</strong> the webcast has ended are available for editing. That includes <em>all</em> fields with the <em>exception</em> of start/end dates, lobbyTimeMinutes, preProduction, duration, userIds, and groupIds.</p><p>If the webcast <strong>end time</strong> has passed and is <strong>Completed</strong>, only edits to linkedVideoId and redirectVod are allowed.</p><p>Event Admins can be removed using their email addresses as path pointer for the fields 'EventAdminEmails' and 'EventAdmins', provided that all of the Event Admins associated with the webcast have email addresses. This is also applicable for the field 'Moderators'.</p><p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><strong>Examples:</strong><p>using EventAdmins: [{ 'op': 'remove', 'path': '/EventAdmins/Email', 'value': 'x1@test.com' }]</p><p>using EventAdminEmails: [{ 'op': 'remove', 'path': '/EventAdminEmails', 'value': 'x2@test.com' }]</p><p>using Moderators: [{ 'op': 'remove', 'path': '/Moderators/Email', 'value': 'x3@test.com' }]</p>",
        "operationId": "patchWebcast",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webcast details to update. Please refer to http://jsonpatch.com/ for the format of the request body.<p>Patch operations on Webcast details editable fields are similar to the Edit Webcast</p><p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/access-control": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Webcast Access Control",
        "description": "Edits access control entities of an existing webcast.",
        "operationId": "editEventControlEntities",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Access Control entities to update for event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventAccessControlEntitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "eventAccessControl"
      }
    },
    "/api/v2/scheduled-events/delete-status/{jobId}": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Delete Webcasts Job Status",
        "description": "Get the status of the <a href=/reference/deleteevents>Delete Webcasts By Custom Field or Date Range</a> job.<p>Status states returned can be [Initialized, InProgress, Completed]",
        "operationId": "getDeleteWebcastsJobStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "jobId",
            "in": "path",
            "description": "jobId returned in <a href=/reference/deleteevents>Delete Webcasts By Custom Field or Date Range</a> endpoint",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/deleteWebcastsJobStatusResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/presentation/{eventId}": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Webcast Presentation File",
        "description": "Upload a presentation file for a webcast.",
        "operationId": "uploadpresentationfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to upload presentation file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "PresentationFile"
                ],
                "properties": {
                  "PresentationFile": {
                    "type": "string",
                    "description": "Presentation file. Accepted file types include .ppt, .pptx. <p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/presentation": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Presentation File",
        "description": "Get the current presentation file for a webcast.",
        "operationId": "downloadPresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to get the current presentation file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast Presentation File",
        "description": "Delete the current presentation file for a webcast.",
        "operationId": "deletePresentationFile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to delete the current presentation file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/background-image/{eventId}": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Upload Webcast Background Image",
        "description": "Upload background image file for a webcast. Note that when you upload a background image Rev always scales it to fit the various screen sizes. When a background image is returned in a subsequent call, the available scale sizes available are also returned.",
        "operationId": "uploadbackgroundfile",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to upload image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Background image file. View <a href=/docs/supported-file-types>Supported File Types</a> in Technical Requirements guide for accepted image types.<p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/background-image": {
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast Background Image",
        "description": "Delete the current background image for a webcast.",
        "operationId": "deleteBackgroundImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of the webcast to delete the background image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/questions": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Q&A Report",
        "description": "Get questions and answers report of a specified webcast.",
        "operationId": "getEventQuestions",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get Q&A report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventQuestion"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Add Webcast Question",
        "description": "Adds a question to a webcast.",
        "operationId": "putEventQuestion",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to add a question",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Question to add.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addEventQuestionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addQuestionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "question"
      }
    },
    "/api/v2/scheduled-events/{eventId}/questions/{questionId}/answer": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Add Webcast Answer",
        "description": "Add answer to a webcast question.",
        "operationId": "putEventQuestionAnswer",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "questionId",
            "in": "path",
            "description": "Id of the question to add answer to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Question to add.Valid values for CloseReason parameter are Declined/FollowUp/Answered/RepliedDirectly",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addEventAnswerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventQuestion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "answer"
      }
    },
    "/api/v2/scheduled-events/{eventId}/poll-results": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Poll Report",
        "description": "Get poll(s) report for a specified webcast.",
        "operationId": "getEventPolls",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get poll report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventPoll"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/comments": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Comments Log",
        "description": "Get comments log for a specified webcast.",
        "operationId": "getEventComments",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get comment log",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production..",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/eventComment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/status": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Status",
        "description": "Get current webcast status for a given webcast.",
        "operationId": "getEventStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get status",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/playback-url": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Playback URLs",
        "description": "Get a list of all playback urls for a given webcast.",
        "operationId": "getPlaybackUrl",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "User-Agent",
            "in": "header",
            "description": "Device user agent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get urls",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP addresses of user/client with comma separated values (Example: <code>127.0.0.0</code>, <code>127.0.0.1</code>)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playback"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/start": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Start Webcast",
        "description": "Starts a webcast. <p>If attempts to start an event that uses live subtitles when the account has no viewing hours. Returns 401 unauthorized error with response message, 'This event requires viewing hours. Please disable subtitles or contact your Rev Admin.'</p>",
        "operationId": "startEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to start",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preProduction",
            "in": "query",
            "description": "Default=false. If true, a Pre-Production webcast is started.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "sbmlRequest": {
                    "type": "string",
                    "description": "Required for Webcasts with WebexLiveStream as a video source. This is the base64encoded string of the SBML json."
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "sbmlRequest"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "End Webcast",
        "description": "Ends a webcast.",
        "operationId": "endEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to end",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preProduction",
            "in": "query",
            "description": "Default=false. If true, a Pre-Production webcast is ended.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/broadcast": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Start Broadcasting Webcast",
        "description": "Start broadcasting a webcast.",
        "operationId": "broadcastEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to start broadcasting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Stop Broadcasting Webcast",
        "description": "Stop broadcasting a webcast.",
        "operationId": "pauseBroadcastEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to stop broadcasting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/record": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Start Webcast Recording",
        "description": "Start recording a webcast. <strong>Important:</strong> If <code>disableAutoRecording=false</code> in <a href=/reference/createevent>Create Webcast</a> and/or <a href=/reference/editeevent>Update Webcast</a>, you cannot use this endpoint.  An error message is generated if you attempt to do so.",
        "operationId": "startRecordingEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to start recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Stop Webcast Recording",
        "description": "Stop recording a webcast. <strong>Important:</strong> If <code>disableAutoRecording=false</code> in <a href=/reference/createevent>Create Webcast</a> and/or <a href=/reference/editeevent>Update Webcast</a>, you cannot use this endpoint.  An error message is generated if you attempt to do so.",
        "operationId": "stopRecordingEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to stop recording",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/linked-video": {
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Update Webcast Video Link",
        "description": "This endpoint updates a video that was previously linked to from a webcast.",
        "operationId": "updateLinkedVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of webcast to update video link",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Linked video settings to update for event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventLinkedVideo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "eventLinkedVideo"
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete Webcast Video Link",
        "description": "This endpoint deletes a video link from a Webcast.",
        "operationId": "deleteLinkedVideo",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to delete the current linked video file",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/post-event-report": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Attendees Report",
        "description": "Get attendees for a completed webcast. You may specify Pre-Production versus Main Event.",
        "operationId": "getPostEventSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get attendee report",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runNumber",
            "in": "query",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postEventSessionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/postEventSessionsBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/report": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "deprecated": true,
        "summary": "Get Webcast Attendees Report (Deprecated)",
        "description": "This is a deprecated version.  Use <a href=/reference/getposteventsessions>Get Webcast Attendees Report</a> instead.",
        "operationId": "getEventReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the webcast to get the attendee report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventSessionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/real-time/attendees": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get Webcast Attendees Realtime",
        "description": "Retrieves real-time attendees of a running webcast.",
        "operationId": "getRealtimeAttendeesSearchRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the currently running webcast to get attendees",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "This contains the details to search the real-time attendees of a webcast.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/realtimeAttendeesSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/realtimeAttendeesSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/registrations": {
      "post": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Register attendees for public webcast",
        "description": "Register attendees/guest users for upcoming public webcast.",
        "operationId": "CreateGuestWebcastUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the upcoming public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Guest user to add to the public webcast.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/guestUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guestUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get list of registrations",
        "description": "Retrieve the list of registrations for particular webcast, with optional pagination.",
        "operationId": "GetGuestUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the upcoming public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, query results are sorted based on field(name,email). Default is set to name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "If provided, query results are sorted on ascending or descending order(asc, desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/guestUsersList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/scheduled-events/{eventId}/registrations/{registrationId}": {
      "get": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Get guest user",
        "description": "Get details of specific guest user of public webcast.",
        "operationId": "GetGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of the registered guest user of  public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getGuestUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Edit guest user",
        "description": "updates specific guest user details of public webcast.",
        "operationId": "EditGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of the registered guest user of  public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update guest user details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GuestWebcastUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Patch guest user",
        "description": "Partially updates specific guest user details of public webcast. You do not need to provide the fields that you are not changing. Please refer to http://jsonpatch.com/ for the format of the request body.<p>Patch operations on User details editable fields [Name, RegistrationFieldsAnswers].</p>",
        "operationId": "EditGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of the registered guest user of  public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Webcasts"
        ],
        "summary": "Delete guest user of public webcast",
        "description": "Deletes specific guest user of public webcast.",
        "operationId": "DeleteGuestUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Id of the public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registrationId",
            "in": "path",
            "description": "Id of the registered guest user of  public webcast.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Add User",
        "description": "Add a new user and assign roles and groups as needed.",
        "operationId": "createUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "User to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "user"
      }
    },
    "/api/v2/users/{userId}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get User By ID",
        "description": "Get user details for a given user account Id.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Delete User",
        "description": "Delete a user account.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Patch User",
        "description": "Partially edits the details of a user. You do not need to provide the user fields that are not changing.<p><strong>Note:</strong> If the account is an LDAP user, only Roles, Groups, and Preferred Language may be updated.</p>",
        "operationId": "editUserDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User details to update. Please refer to http://jsonpatch.com/ for the format of the request body.<p>Patch operations on User details editable fields [Email, FirstName, LastName, Title, Phone, Language, RoleIds, GroupIds]</p><p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/users/{username}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get User by Username",
        "description": "Get user details for a given user account Username.",
        "operationId": "getUserByUsername",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "username",
            "in": "path",
            "description": "Username of user account to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates the context of the value provided in the request path ':username'. If a value of 'username' is provided, the user is retrieved using the 'Username' property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/{email}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get User by Email",
        "description": "Get user details for a given user account Email Address.",
        "operationId": "getUserByEmailAddress",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "email",
            "in": "path",
            "description": "Email address of user account to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Indicates the context of the value provided in the request path ':email'. If a value of 'email' is provided, the user is retrieved using the 'Email' property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/uploads/profile-image/{userId}": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Upload User Profile Image",
        "description": "Upload a profile image for a given user.",
        "operationId": "uploadProfileImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user to upload profile image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "ImageFile"
                ],
                "properties": {
                  "ImageFile": {
                    "type": "string",
                    "description": "Thumbnail image file. Accepted image types are listed in <a href=/docs/supported-file-types>Supported File Types</a>.<p>Please provide Content-Type header for the uploaded files.</p>",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Resource Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/{userId}/profile-image": {
      "delete": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Delete User Profile Image",
        "description": "Delete a profile image for a given user.",
        "operationId": "deleteProfileImage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of user to delete profile image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/groups": {
      "post": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Add Group",
        "description": "Add a new group and assign users and roles as needed.",
        "operationId": "createGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "roleIds"
      },
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get Groups",
        "description": "Get all groups. It supports pagination.",
        "operationId": "GetGroups",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number - use 0 or leave blank to get the first page of results, 1 to get the second page, etc.",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groups"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/groups/{id}": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get Group Details By ID",
        "description": "Return group id, group name and group roles for a given group id.",
        "operationId": "GetGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/group"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Update Group",
        "description": "Edits a group.",
        "operationId": "editGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of group to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/groupRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "roleIds"
      },
      "delete": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Delete Group",
        "description": "Delete a group.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of group to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Patch Group",
        "description": "Partially edits the details of a group. You do not need to provide the fields that you are not changing. For <strong>LDAP groups</strong>, only roles can be updated. For Rev system groups, <em>both</em> users and roles can be updated.<p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><p><strong>Examples:</strong></p><p>To add users: [{ 'op': 'add', 'path': '/UserIds/-', 'value': '13443c6c-e2cc-49e2-b4b2-ec3ebad97fb1' }]</p><p>To add roles: [{ 'op': 'add', 'path': '/RoleIds/-', 'value': 'b14f6a56-254d-43ee-950b-145811ebfc8c' }]</p><p>To remove users: [{ 'op': 'remove', 'path': '/UserIds', 'value': 'b14f6a56-254d-43ee-950b-145811ebfc8c' }]</p><p>To remove roles: [{ 'op': 'remove', 'path': '/RoleIds', 'value': 'b14f6a56-254d-43ee-950b-145811ebfc8c' }]</p>",
        "operationId": "patchGroup",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group details  to update. Please refer to http://jsonpatch.com/ for the format of the request body. <p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/v2/search/groups/{id}/users": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get Users in a Group",
        "description": "Returns the userIds for a given group.",
        "operationId": "getGroupMembership",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the group to get users",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupMembership"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/search/access-entity": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Search Users and Groups",
        "description": "Searches the specified access entity (user/group) in Rev for a specified query string. If no entity is specified, then both are searched.",
        "operationId": "searchAccessEntity",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of access entity to search (user/group). One or more may be provided. If no type is provided, all entities are included.",
            "schema": {
              "type": "string",
              "enum": [
                "User",
                "Group"
              ]
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string. If no search string is provided, treated as a blank search. Example: If the group parameter is specified with no search string, the first 1000 groups are returned (count parameter default).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Number of access entities to get. (By default count is 1000)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/searchAccessEntityResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/login-report": {
      "get": {
        "tags": [
          "Users & Groups"
        ],
        "summary": "Get Users By Login Date",
        "description": "Get a list of users and their last login date. Users who have never logged in are not be returned.",
        "operationId": "loginReport",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "sortField",
            "in": "query",
            "description": "If provided, query results are sorted based on field.",
            "schema": {
              "type": "string",
              "enum": [
                "LastLogin",
                "Username"
              ]
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order for sorting the result, asc or desc.",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLoginReportResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channels",
        "description": "Get list of all channels. Includes the channel members and specifies the type of member they are (user/group) along with their channel role.",
        "operationId": "getChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of channels to return per page. Default=10.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero based index of the page. This means page number starts at 0 and has first set of 10 channels while page 1 contains next set of 10 channels and so forth.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getChannelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Create Channel",
        "description": "Add a new channel and assign channel members and roles as needed.",
        "operationId": "createChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "users/groups, as channel members, to add to Channel. Includes a flag to indicate if a member is acting as a Channel administrator.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/createChannel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "members"
      }
    },
    "/api/v2/channels/{channelId}": {
      "put": {
        "tags": [
          "Channels"
        ],
        "summary": "Update Channel",
        "description": "Edit a channel.",
        "operationId": "editChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of channel to edit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/channelRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "members"
      },
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete Channel",
        "description": "Delete a channel.",
        "operationId": "deleteChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of channel to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Channels"
        ],
        "summary": "Patch Channel",
        "description": "Partially edits the members and details of a channel. You do not need to provide the fields that you are not changing.<p>Please refer to http://jsonpatch.com/ for the format of the request body.</p><strong>Examples:</strong><p>To add members: [{'op': 'add',  'path': '/Members/-', 'value': {'id': '0e2a1bfc-0a36-4ee1e-ac1e-3647b256537d','type': 'Group','roleTypes': ['Member','Contributor']}} ]</p><p>To remove members : [{ 'op': 'remove',  'path': '/Members',  'value': '63a76eb9-fa62-46e0-bdb5-c8ad34aec086' }]</p><p>To update channel name : [{ 'op': 'replace', 'path': '/Name', 'value': 'New Name' }]</p>",
        "operationId": "patchChannel",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "channelId",
            "in": "path",
            "description": "Id of the channel to patch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Channels  details  to update. Please refer to http://jsonpatch.com/ for the format of the request body. <p>Operations supported: add,remove,copy,replace,test,move.</p>",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "401": {
            "description": "Unauthorized error"
          },
          "409": {
            "description": "Conflict error"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/search/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "Get Channels For User",
        "description": "Returns only the channels for the user making the API call.",
        "operationId": "getUserChannels",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/searchUserChannelsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/categories": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Categories",
        "description": "Get list of all categories based on query parameters. If no query paramter is passed, all categories are returned.",
        "operationId": "getCategories",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "parentCategoryId",
            "in": "query",
            "description": "All child categories of given parentCategoryId are returned. To return top level categories only, set parentCategoryId as null or do not send parentCategoryId in the request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllDescendants",
            "in": "query",
            "description": "If false, then return categories only at one level. If true or not provided, then return all the nested categories.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoriesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Add Category",
        "description": "Add a new category.",
        "operationId": "createCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "Category to add to the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Category"
      }
    },
    "/api/v2/categories/{categoryId}": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update Category",
        "description": "Edit a category.",
        "operationId": "editCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the category to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Category to edit in the system",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/editCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "Category"
      },
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Category By ID",
        "description": "Get a specified category by category Id.",
        "operationId": "getCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of the category to get details",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getCategoryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Delete Category",
        "description": "Delete a category.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "categoryId",
            "in": "path",
            "description": "Id of category to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not found error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/users/roles": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Roles",
        "description": "Get list of all roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/userRoleEntity"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/video-fields": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Custom Fields",
        "description": "Get list of all custom fields.",
        "operationId": "customMetadata",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customMetadaResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/presentation-profiles": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Presentation Profiles",
        "description": "Get list of all presentation profiles.",
        "operationId": "getPresentationProfiles",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/presentationprofileresponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/zones": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Zones",
        "description": "Get list of all zones.",
        "operationId": "getZones",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getZones"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Add Zone",
        "description": "Add a new zone.",
        "operationId": "createZone",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "The details of the zone to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createOrEditZoneRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/createZone"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "createOrEditZoneRequest"
      }
    },
    "/api/v2/zones/{id}": {
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update Zone",
        "description": "Edit a zone.",
        "operationId": "editZone",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of zone to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details of the zone to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createOrEditZoneRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "createOrEditZoneRequest"
      },
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Delete Zone",
        "description": "Delete a zone.",
        "operationId": "deleteZone",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of zone to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/zonedevices": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Zone Devices",
        "description": "Get a list of all devices in a zone.",
        "operationId": "getZoneDevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zoneDevicesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/accounts/branding-settings": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Branding Settings",
        "description": "Get the branding and style settings for a Rev entity.",
        "operationId": "getBrandingSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/brandingSettingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/accounts/webcast-registration-fields": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Webcast Registration Fields",
        "description": "Get a list of all webcast registration fields defined for Public webcasts.",
        "operationId": "getWebcastRegistrationFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/webcastRegistrationField"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Administration"
        ],
        "summary": "Update Webcast Registration Field",
        "description": "Edit webcast registration fields used in Public webcasts.",
        "operationId": "editWebcastRegistrationField",
        "requestBody": {
          "description": "This contains the details required to modify a webcast registration field",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createOrUpdateWebcastRegistrationField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "webcastRegistrationField"
      },
      "post": {
        "tags": [
          "Administration"
        ],
        "summary": "Add Webcast Registration Fields",
        "description": "Create webcast registration fields that can be used in Public webcasts. Used as a means to capture attendee details beyond name and email address when hosting Public events. <p>Use Ids returned in this endpoint in the <a href=/reference/createevent>Create Webcast</a> API to use a custom field.</p>",
        "operationId": "createWebcastRegistrationField",
        "requestBody": {
          "description": "This contains the details required to create a webcast registration field",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createOrUpdateWebcastRegistrationField"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "webcastRegistrationField"
      }
    },
    "/api/v2/accounts/webcast-registration-fields/{fieldId}": {
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Delete Webcast Registration Field",
        "description": "Delete a webcast registration field.",
        "operationId": "deleteWebcastRegistrationField",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "Id of the field to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/jwt-encryption-keys": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get JWT Encryption keys for account",
        "description": "Get all JWT Encryption keys for account. This API is only available for partner accounts.",
        "operationId": "getJwtEncryptionKeys",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getJwtEncryptionKeys"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not found error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/jwt-public-keys/{kid}": {
      "delete": {
        "tags": [
          "Administration"
        ],
        "summary": "Delete jwt public key",
        "description": "Delete jwt public key if it is not valid any more or has been rotated out. This API is only available for partner accounts.",
        "operationId": "deleteJwtPublicKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "kid",
            "in": "path",
            "description": "Key Id of the key to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Not found error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/analytics/accounts/iq-credits-usage": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Rev IQ Credits Usage",
        "description": "Get Rev IQ credits usage. Data for video and live events is collected.",
        "operationId": "getAccountIqCreditsUsage",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "scrollId",
            "in": "query",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Filter date for those recorded credits that happened on or after the WHEN field.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Filter date for those recorded credits that happened on or before the WHEN field.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iqCreditsUsageSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/maintenance-schedule": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get Maintenance Schedule",
        "description": "This endpoint returns Rev’s scheduled maintenance windows (by date/time) for the current year. Maintenance dates vary for the different Rev environments and need to be maintained by environment region (US, EU and AU).",
        "operationId": "maintenance-schedule",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/getMaintenanceScheduleResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/system-health": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Get System Health",
        "description": "This endpoint returns the status of Rev as shown on the Rev System Health page. The response should be a 200 OK unless there is a problem which is then displayed as a 5xx error.",
        "operationId": "system-health",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "503": {
            "description": "Service unavailable",
            "content": {}
          }
        }
      }
    },
    "/api/v2/devices/dmes": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get DME Devices",
        "description": "Get a list of all DME devices and their status.",
        "operationId": "getdmedevices",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dmedevicesresponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Add DME Device",
        "description": "Adds a new DME device.",
        "operationId": "createDmeDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          }
        ],
        "requestBody": {
          "description": "DME device to add to the system.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/newDmeDevice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/newDmeDeviceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "dmeDevice"
      }
    },
    "/api/v2/devices/dmes/{deviceId}": {
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Delete DME Device",
        "description": "Deletes a DME device.",
        "operationId": "deleteDmeDevice",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of DME device to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {}
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/api/v2/devices/dmes/{deviceId}/health-status": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get DME Health Status",
        "description": "This endpoint retrieves the last reported, complete health status of a DME. Each DME communicates a health status based on a frequency determined by Rev. Currently, this is every 60 seconds. Customers implementing longitudinal comparisons should periodically call this endpoint.",
        "operationId": "getDmeHealthStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Id of DME device to query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dmeHealthStatus"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/userAccess": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit of User Access for Account",
        "description": "Get audit details for all of account's user access.",
        "operationId": "getUserAccessAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/userAccess/{userId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit of User Access for User",
        "description": "Get user access audit details of a given user.",
        "operationId": "getUserAccessAuditDetailsByUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/users": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Users",
        "description": "Get audit details of all users.",
        "operationId": "getUsersAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/users/{userId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a User",
        "description": "Get audit details for a given user.",
        "operationId": "getUserAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/groups": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Groups",
        "description": "Get audit details of all groups.",
        "operationId": "getGroupsAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/groups/{groupId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Group",
        "description": "Get audit details of a given group.",
        "operationId": "getGroupAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Group Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/devices": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Devices",
        "description": "Get audit details of all devices.",
        "operationId": "getDevicesAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/devices/{deviceId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Device",
        "description": "Get audit details of a given device.",
        "operationId": "getDeviceAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "Device Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/videos": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Videos",
        "description": "Get audit details of all videos.",
        "operationId": "getVideosAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/videos/{videoId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Video",
        "description": "Get audit details of a given video",
        "operationId": "getvideoAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "videoId",
            "in": "path",
            "description": "Video Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/scheduledEvents": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for All Webcasts",
        "description": "Get audit details of all webcasts.",
        "operationId": "getEventsAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized error",
            "content": {}
          },
          "500": {
            "description": "Internal server error",
            "content": {}
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/scheduledEvents/{eventId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Webcast",
        "description": "Get audit details of a given webcast.",
        "operationId": "getEventAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          }
        }
      }
    },
    "/network/audit/accounts/{accountId}/principals/{principalId}": {
      "get": {
        "tags": [
          "Audit"
        ],
        "summary": "Get Audit for a Principal",
        "description": "Get audit details of a given principal.",
        "operationId": "getPrincipalAuditDetails",
        "parameters": [
          {
            "$ref": "#/components/parameters/authorizationParam"
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Account Id to get audit details",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "principalId",
            "in": "path",
            "description": "Principal Id to get audit deatils for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Valid start date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Valid end date greater than the specified fromDate (start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "nextContinuationToken",
            "in": "query",
            "description": "Id from subsequent request to get next set of records",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/auditResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "authorizationParam": {
        "name": "Authorization",
        "in": "header",
        "description": "Use the access token received from the response of the login or oauth request as the authorization header value, prefixed by 'VBrick '",
        "required": true,
        "schema": {
          "type": "string",
          "example": "VBrick Lgoz53OebqK8d_35nI..."
        }
      }
    },
    "schemas": {
      "badRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Error code."
          },
          "detail": {
            "type": "string",
            "description": "Error details."
          }
        }
      },
      "video": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          }
        }
      },
      "videoChapters": {
        "type": "object",
        "properties": {
          "chapters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "startTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "imageUrl": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "videoDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "thumbnailKey": {
            "type": "string"
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "linkedUrl": {
            "$ref": "#/components/schemas/linkedUrlMetadata"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "approvalStatus": {
            "type": "string"
          },
          "enableRatings": {
            "type": "boolean"
          },
          "enableDownloads": {
            "type": "boolean"
          },
          "enableComments": {
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "description": "This is a shared password for public guests. This field exists only in the response if the user has EDIT permission to the video."
          },
          "status": {
            "type": "string"
          },
          "canEdit": {
            "type": "boolean"
          },
          "videoAccessControl": {
            "type": "string"
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiAccessControlEntity"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiCustomFields"
            }
          },
          "expirationDate": {
            "type": "string",
            "format": "date"
          },
          "expirationAction": {
            "type": "string",
            "description": "This sets action when video expires. This is an enum and can have the following values: Delete/Inactivate."
          },
          "uploadedBy": {
            "type": "string"
          },
          "whenUploaded": {
            "type": "string"
          },
          "lastViewed": {
            "type": "string"
          },
          "htmlDescription": {
            "type": "string"
          },
          "publishDate": {
            "type": "string",
            "format": "date"
          },
          "categoryPaths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryPathsItem"
            }
          },
          "sourceType": {
            "type": "string"
          },
          "is360": {
            "type": "boolean"
          },
          "unlisted": {
            "type": "boolean"
          },
          "totalViews": {
            "type": "integer"
          },
          "overallProgress": {
            "type": "number"
          },
          "isProcessing": {
            "type": "boolean"
          },
          "userTags": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string"
                },
                "displayName": {
                  "type": "string"
                }
              }
            }
          },
          "upLoader": {
            "description": "Video uploader.",
            "$ref": "#/components/schemas/userAccessEntityResponse"
          },
          "owner": {
            "description": "Video owner.",
            "$ref": "#/components/schemas/userAccessEntityResponse"
          },
          "hasAudioOnly": {
            "type": "boolean"
          },
          "avgRating": {
            "type": "number"
          },
          "ratingsCount": {
            "type": "integer"
          },
          "commentCount": {
            "type": "integer"
          },
          "whenModified": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "type": "number"
          },
          "instances": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "isOriginalInstance": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                },
                "videoKey": {
                  "type": "string"
                },
                "progress": {
                  "type": "number"
                },
                "size": {
                  "type": "number"
                },
                "preset": {
                  "type": "object",
                  "properties": {
                    "container": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "videoConference": {
            "type": "object",
            "properties": {
              "whenRecordingStarted": {
                "type": "string",
                "format": "date-time"
              },
              "sipAddress": {
                "type": "string"
              },
              "sipPin": {
                "type": "string"
              },
              "bitrateKbps": {
                "type": "integer"
              },
              "microsoftTeamsMeetingUrl": {
                "type": "string"
              }
            }
          },
          "expiration": {
            "type": "object",
            "properties": {
              "expirationDate": {
                "type": "string",
                "format": "date-time"
              },
              "ruleId": {
                "type": "string"
              },
              "expiryRuleType": {
                "type": "string"
              },
              "numberOfDays": {
                "type": "integer"
              },
              "deleteOnExpiration": {
                "type": "boolean"
              }
            }
          },
          "closedCaptionsEnabled": {
            "type": "boolean"
          },
          "approval": {
            "type": "object",
            "properties": {
              "whenSubmittedForApproval": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string"
              },
              "approvalProcessId": {
                "type": "string"
              },
              "approvalProcessName": {
                "type": "string"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "stepId": {
                      "type": "string"
                    },
                    "stepName": {
                      "type": "string"
                    },
                    "approverName": {
                      "type": "string"
                    },
                    "approverId": {
                      "type": "string"
                    },
                    "whenRequested": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "whenResponded": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "transcodeFailed": {
            "type": "boolean"
          },
          "source": {
            "type": "string"
          },
          "chapters": {
            "type": "object",
            "properties": {
              "whenStarted": {
                "type": "string",
                "format": "date-time"
              },
              "chapterUri": {
                "type": "string"
              },
              "chapterThumbnailUri": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "chapters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "imageId": {
                      "type": "string"
                    },
                    "title": {
                      "type": "string"
                    },
                    "time": {
                      "type": "string"
                    },
                    "extension": {
                      "type": "string"
                    },
                    "isUploadedImage": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "mediaCategories": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "videoDetailEdit": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The video title"
          },
          "description": {
            "type": "string",
            "description": "The video description"
          },
          "linkedUrl": {
            "$ref": "#/components/schemas/linkedUrlMetadata"
          },
          "categories": {
            "description": "If you use categoryIds and they do not exist/are incorrect, the request is rejected. The request is also rejected if you do not have contribute rights to a restricted category and you attempt to add/edit or otherwise modify it.",
            "$ref": "#/components/schemas/mediaCategories"
          },
          "tags": {
            "type": "array",
            "description": "Assign the video to multiple tag GUIDs if desired",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. The video status."
          },
          "expirationDate": {
            "type": "string",
            "description": "Date field to prompt expirationAction. Format must be: <code>YYYY-MM-DD</code>.",
            "format": "date"
          },
          "expirationAction": {
            "type": "string",
            "description": "This sets action when video expires. This is an enum and can have the following values: Delete/Inactivate."
          },
          "publishDate": {
            "type": "string",
            "description": "By default, the publishDate is set to the current date the video is set to Active. You can also set the publishDate to a date in the future to make the video Active. If the video is already Active, the publishDate can be set to a date in the past. Format must be <code>YYYY-MM-DD</code> to avoid generating an error.",
            "format": "date"
          },
          "enableRatings": {
            "type": "boolean",
            "description": "Default=true. Allows video to be rated."
          },
          "enableDownloads": {
            "type": "boolean",
            "description": "Default=true. Allows video to be downloaded."
          },
          "enableComments": {
            "type": "boolean",
            "description": "Default=true. Allows comments on the video."
          },
          "videoAccessControl": {
            "type": "string",
            "enum": [
              "Public",
              "AllUsers",
              "Private"
            ],
            "description": "This sets access control for the video. This is an enum and can have the following values: <code>Public/AllUsers/Private</code>. <p>A value of <strong>AllUsers</strong> is equal to all internal/authenticated users. A value of <strong>Private</strong> allows access to those Users, Groups, and Channels <em>explicitly</em> identified.</p><p> Be aware that you can assign multiple Users, Groups, and Channels in the <strong>accessControlEntites</strong> parameter in addition to the <strong>AllUser</strong> or <strong>Public</strong> settings. If no value is set, the default is <strong>Private</strong>.</p> <p>In the case of an incorrect value, the call is rejected with an HTTP 400 error.</p><p><strong>Note:</strong> If <strong>Channels</strong> is set at the videoAccessControl, it is translated to <strong>Private</strong> and a Channel <em>must</em> be specified in the accessControlEntities. If a Channel is included in the accessControlEntities, then the canEdit parameter is ignored.</p>"
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiAccessControlEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "Used if the videoAccessControl is set to Public."
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiCustomFields"
            }
          },
          "unlisted": {
            "type": "boolean",
            "description": "Specifies if the video is unlisted.  If unlisted, it is not visible or searchable in the Rev UI by other users."
          },
          "userTags": {
            "type": "array",
            "description": "An array of user ids that are tagged in the video. The account must be licensed and enabled for Facial Recognition. If the user does not exist, a 500 error is returned.",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "description": "Rev User the video is attached to. If the User does not exist in Rev, the upload is rejected. If value is not provided in the request, it defeaults to the video's uploader user.",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          }
        }
      },
      "videocomments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/videocommentsItem"
            }
          }
        }
      },
      "videoreport": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "dateViewed": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "zone": {
            "type": "string"
          },
          "device": {
            "type": "string"
          },
          "playBackUrl": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "userDeviceType": {
            "type": "string"
          },
          "viewingTime": {
            "type": "string"
          },
          "viewingStartTime": {
            "type": "string"
          },
          "viewingEndTime": {
            "type": "string"
          }
        }
      },
      "videocommentsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "childComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/childVideocomments"
            }
          }
        }
      },
      "childVideocomments": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "childComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/childVideocomments"
            }
          }
        }
      },
      "userId": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Account user Id"
          }
        }
      },
      "user": {
        "required": [
          "email",
          "lastname",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Used to login to Rev. Not case sensitive but must be unique."
          },
          "firstname": {
            "type": "string",
            "description": "First name. Not required."
          },
          "lastname": {
            "type": "string",
            "description": "Last name. Required."
          },
          "email": {
            "type": "string",
            "description": "Must be a vaild email format. Required."
          },
          "title": {
            "type": "string",
            "description": "Allows assignment of a title to the user"
          },
          "phonenumber": {
            "type": "string"
          },
          "language": {
            "type": "string",
            "description": "Preferred language. Two digit language code. For example, en for English. View <a href=/docs/supported-languages>Supported Languages</a> for codes."
          },
          "groupIds": {
            "type": "array",
            "description": "Group Ids to assign the user to",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "type": "array",
            "description": "Role Ids to assign the user to. Default=Media Viewer.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "userResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        }
      },
      "userLoginRequest": {
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of account trying to login"
          },
          "password": {
            "type": "string",
            "description": "Password of account trying to login"
          }
        }
      },
      "userLoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "guestUser": {
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user. Required."
          },
          "email": {
            "type": "string",
            "description": "Must be a vaild email format. Required and must be unique."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldsAnswers"
            }
          }
        }
      },
      "guestUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user."
          },
          "email": {
            "type": "string",
            "description": "EmailId of the guestUser."
          },
          "registrationId": {
            "type": "string",
            "description": "RegistrationId. Id of the registered guest user."
          },
          "eventId": {
            "type": "string",
            "description": "EventId of the webcast for which guest user registered."
          },
          "token": {
            "type": "string",
            "description": "Guest user token that can be used on the webcast link to the public event to automatically log the public user into the event."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldsAnswers"
            }
          }
        }
      },
      "getGuestUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user."
          },
          "email": {
            "type": "string",
            "description": "EmailId of the guestUser."
          },
          "registrationId": {
            "type": "string",
            "description": "RegistrationId. Id of the registered guest user."
          },
          "token": {
            "type": "string",
            "description": "Guest user token that can be used on the webcast link to the public event to automatically log the public user into the event."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldsAnswers"
            }
          },
          "whenCreated": {
            "type": "string",
            "format": "date-time"
          },
          "whenModified": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "guestUsersList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user."
          },
          "email": {
            "type": "string",
            "description": "EmailId of the guestUser."
          },
          "registrationId": {
            "type": "string",
            "description": "RegistrationId. Id of the registered guest user."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldsAnswers"
            }
          }
        }
      },
      "GuestWebcastUserRequest": {
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of guest user. Required."
          },
          "email": {
            "type": "string",
            "description": "Must be a vaild email format. Required and must be unique.Email is used for validation and cannot be updated. Should match with provided rigistrationId user mail."
          },
          "registrationFieldsAnswers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/registrationFieldsAnswers"
            }
          }
        }
      },
      "authenticationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "extendSessionTimeoutResponse": {
        "type": "object",
        "properties": {
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "loginRequestAPIKey": {
        "required": [
          "apiKey",
          "secret"
        ],
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "Configured in the Rev client"
          },
          "secret": {
            "type": "string",
            "description": "Configured in the Rev client"
          }
        }
      },
      "getUserListResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/getUserResponse"
        }
      },
      "getUserResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userAssociatedEntity"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userAssociatedEntity"
            }
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userAssociatedEntity"
            }
          },
          "profileImageUri": {
            "type": "string"
          }
        }
      },
      "userAssociatedEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "groupRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Required. Unique name of Group."
          },
          "userIds": {
            "description": "User Ids to add to Group",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "description": "Role Ids to add to Group",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "rating": {
        "required": [
          "rating"
        ],
        "type": "object",
        "properties": {
          "rating": {
            "type": "string",
            "description": "Numerical rating. Numbers 1 to 5. Must be a whole number, no decimals."
          }
        }
      },
      "videoPresentationStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Initialized",
              "InProgress",
              "Completed",
              "Error"
            ]
          },
          "details": {
            "type": "string",
            "description": "Status description"
          }
        }
      },
      "videoStatus": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "isProcessing": {
            "type": "boolean"
          },
          "overallProgress": {
            "type": "number"
          },
          "isActive": {
            "type": "boolean"
          },
          "uploadedBy": {
            "type": "string"
          },
          "whenUploaded": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "transcriptionRequest": {
        "type": "object",
        "properties": {
          "language": {
            "type": "string",
            "description": "View the latest <a href=/docs/supported-languages>Supported Languages</a> in Rev technical requirements.",
            "enum": [
              "en",
              "en-gb",
              "fr",
              "de",
              "pt-br",
              "es",
              "zh-cmn-hans",
              "en-au",
              "hi",
              "nl",
              "it"
            ]
          },
          "serviceType": {
            "type": "string",
            "description": "Vbrick, Voicebase, or null. If both are enabled, then Vbrick is used.",
            "enum": [
              "Vbrick",
              "VoiceBase"
            ]
          }
        }
      },
      "transcriptionResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "transcriptionId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "transcriptionService": {
            "type": "string",
            "description": "Type of transcription service to use by Rev for the video transcription.",
            "enum": [
              "Manual",
              "VoiceBase",
              "Vbrick"
            ]
          }
        }
      },
      "videoTranscriptionStatus": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "transcriptionId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "translationRequest": {
        "type": "object",
        "description": "</br><p>View the latest <a href=/docs/supported-languages>Supported Languages</a> in Rev technical requirements for sourceLanguage and targetLanguages.</p>",
        "properties": {
          "sourceLanguage": {
            "type": "string",
            "enum": [
              "en",
              "en-gb",
              "fr",
              "de",
              "pt-br",
              "es",
              "zh-cmn-hans"
            ]
          },
          "targetLanguages": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "zh-tw",
                "zh",
                "da",
                "en",
                "fi",
                "fr",
                "fr-ca",
                "de",
                "el",
                "id",
                "it",
                "ja",
                "ko",
                "no",
                "pl",
                "pt",
                "ru",
                "es",
                "sv",
                "th",
                "tr"
              ]
            }
          }
        }
      },
      "translationResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "sourceLanguage": {
            "type": "string"
          },
          "targetLanguages": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string"
                },
                "transcriptionId": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "NotStarted",
                    "Preparing",
                    "InProgress",
                    "Success",
                    "Failed"
                  ]
                }
              }
            }
          }
        }
      },
      "translationStatus": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "language": {
            "type": "string"
          }
        }
      },
      "transcriptionFilesResponse": {
        "type": "object",
        "properties": {
          "transcriptionFiles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "locale": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "downloadUrl": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "supplementalFilesResponse": {
        "type": "object",
        "properties": {
          "supplementalFiles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fileId": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "size": {
                  "type": "number"
                },
                "downloadUrl": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "migrationRequest": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "The uploader is set to this user"
          },
          "owner": {
            "description": "The video ownership is set to this user. Only the owner.userId is used for lookup",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "uploadedBy": {
            "type": "string",
            "description": "Taken from the userName that uploaded the video"
          },
          "whenUploaded": {
            "type": "string",
            "description": "Upload date is set to this value. Example: <code>2019-02-26 15:53:12</code>",
            "format": "date-time"
          },
          "publishDate": {
            "type": "string",
            "description": "By default, the publishDate is set to the current date the video is set to Active status. You can also set the publishDate to a date in the future to make the video Active at that time. If the video is already Active, the publishDate can be set to a date in the past. <p>Note: Format must be YYYY-MM-DD to avoid generating an error.</p>",
            "format": "date"
          }
        }
      },
      "videoPlaybackUrl": {
        "type": "object",
        "properties": {
          "video": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "categories": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/category"
                }
              },
              "description": {
                "type": "string"
              },
              "htmlDescription": {
                "type": "string"
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "thumbnailUrl": {
                "type": "string"
              },
              "playbackUrl": {
                "type": "string"
              }
            }
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "fullPath": {
            "type": "string"
          },
          "restricted": {
            "type": "boolean"
          }
        }
      },
      "videoChaptersMetadata": {
        "type": "object",
        "properties": {
          "chapters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "Chapter title"
                },
                "time": {
                  "type": "string",
                  "description": "Chapter's start time using a timespan format (e.g. <code>00:00:00</code>). The value is unique and cannot be the same as other start times."
                },
                "imageFile": {
                  "type": "string",
                  "description": "Chapter image filename. This value is unique, and should match the filename of the image file payload. <p>Please provide Content-Type header for the uploaded image file.</p>"
                }
              }
            }
          }
        },
        "required": [
          "title",
          "time"
        ]
      },
      "userAccessEntityResponse": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "userAccessEntityRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Rev UserId identifies the user the media is attached to. If the Id does not exist in Rev, the request is rejected."
          },
          "username": {
            "type": "string",
            "description": "Rev Username identifies the user the media is attached to. If the Username does not exist in Rev, the request is rejected."
          },
          "email": {
            "type": "string",
            "description": "Rev Email identifies the user the media is attached to. If the Email does not exist in Rev, the request is rejected."
          }
        }
      },
      "videometadata": {
        "type": "object",
        "required": [
          "uploader"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Video title. If not specified, API uses uploaded filename as the title."
          },
          "description": {
            "type": "string",
            "description": "Description is set to null if not specified"
          },
          "uploader": {
            "type": "string",
            "description": "Rev username identifies the user the video is attached to. If not specified, or the username does not exist in Rev, the upload is rejected."
          },
          "owner": {
            "description": "Rev User the video is attached to. If the User does not exist in Rev, the upload is rejected.",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "categories": {
            "description": "An array of category names attached to the video. If no categories are specified, or the category does not exist in Rev, no categories are attached. The request is also rejected if you do not have contribute rights to a restricted category and you attempt to add/edit or otherwise modify it. <p>This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.</p><p>You should only use categories OR categoryIds but not both.</p>",
            "$ref": "#/components/schemas/mediaCategories"
          },
          "categoryIds": {
            "type": "array",
            "description": "An array of category Ids attached to the video. If the category does not exist in Rev, the upload fails. The request is also rejected if you do not have contribute rights to a restricted category and you attempt to add/edit or otherwise modify it. <p>This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.</p><p>You should only use categories OR categoryIds but not both.</p>",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "An array of strings tagged to the video",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. Status of the video after it is uploaded."
          },
          "enableRatings": {
            "type": "boolean",
            "description": "Default=true. This enables or disables ratings for the uploaded video."
          },
          "enableDownloads": {
            "type": "boolean",
            "description": "Default=false. This enables or disables downloading of the video from Rev."
          },
          "enableComments": {
            "type": "boolean",
            "description": "Default=true. This enables or disables ability to comment on uploaded video."
          },
          "videoAccessControl": {
            "type": "string",
            "enum": [
              "Public",
              "AllUsers",
              "Private"
            ],
            "description": "This sets access control for the video. This is an enum and can have the following values: <code>Public/AllUsers/Private</code>. <p>A value of <strong>AllUsers</strong> is equal to all internal/authenticated users. A value of <strong>Private</strong> allows access to those Users, Groups, and Channels <em>explicitly</em> identified.</p><p> Be aware that you can assign multiple Users, Groups, and Channels in the <strong>accessControlEntites</strong> parameter in addition to the <strong>AllUser</strong> or <strong>Public</strong> settings. If no value is set, the default is <strong>Private</strong>.</p> <p>In the case of an incorrect value, the call is rejected with an HTTP 400 error.</p><p><strong>Note:</strong> If <strong>Channels</strong> is set at the videoAccessControl, it is translated to <strong>Private</strong> and a Channel <em>must</em> be specified in the accessControlEntities. If a Channel is included in the accessControlEntities, then the canEdit parameter is ignored.</p>"
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiAccessControlEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "A password for Public Video Access Control. Use this field when the videoAccessControl is set to Public only. Otherwise, this field is ignored."
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/uploadCustomFields"
            }
          },
          "sourceType": {
            "type": "string",
            "description": "Specifies where the video originated. Possible values are 'REV', 'WEBEX', 'API', 'VIDEO CONFERENCE', 'WebexLiveStream', 'LiveEnrichment'"
          },
          "doNotTranscode": {
            "type": "boolean",
            "description": "Default=false. This enables the video to bypass transcoding."
          },
          "is360": {
            "type": "boolean",
            "description": "Default=false. This enables the 360 video flag."
          },
          "unlisted": {
            "type": "boolean",
            "description": "Default=false. This enables the unlisted video flag."
          },
          "publishDate": {
            "type": "string",
            "description": "Date the video is published. If IsActive is set to true and PublishDate is not specified, a default value is set (i.e. Today's date). This should be specified based on the date in the the timezone of the current account."
          },
          "userTags": {
            "type": "array",
            "description": "An array of user Ids tagged in the video",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "videoUploadResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          },
          "statusUri": {
            "type": "string"
          }
        }
      },
      "dmeHealthStatus": {
        "type": "object",
        "properties": {
          "bootTime": {
            "type": "string",
            "format": "date-time"
          },
          "systemTime": {
            "type": "string",
            "format": "date-time"
          },
          "systemVersion": {
            "type": "string"
          },
          "fullVersion": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "natAddress": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "overallHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "cpuUsagePercent": {
            "type": "number"
          },
          "cpuUsageHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "rtmpServerVersion": {
            "type": "string"
          },
          "rtspCpuUsagePercent": {
            "type": "number"
          },
          "rtmpCpuUsagePercent": {
            "type": "number"
          },
          "mpsConnectionCount": {
            "type": "number"
          },
          "mpsThroughputBitsPerSec": {
            "type": "number"
          },
          "mpsThroughputPercent": {
            "type": "number"
          },
          "throughputHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "multiProtocolIncomingConnectionsCount": {
            "type": "number"
          },
          "multiProtocolOutgoingConnectionsCount": {
            "type": "number"
          },
          "mpsMulticastStreamCount": {
            "type": "number"
          },
          "multiProtocolMaxCount": {
            "type": "number"
          },
          "rtpIncomingConnectionsCount": {
            "type": "number"
          },
          "rtpOutgoingConnectionsCount": {
            "type": "number"
          },
          "rtpMulticastConnectionsCount": {
            "type": "number"
          },
          "rtpConnectionsMaxCount": {
            "type": "number"
          },
          "iScsiEnabled": {
            "type": "boolean"
          },
          "diskContentTotal": {
            "type": "number"
          },
          "diskContentUsed": {
            "type": "number"
          },
          "diskContentHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "diskSystemTotal": {
            "type": "number"
          },
          "diskSystemUsed": {
            "type": "number"
          },
          "diskSystemHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "physicalMemoryTotal": {
            "type": "number"
          },
          "physicalMemoryUsed": {
            "type": "number"
          },
          "swapMemoryUsed": {
            "type": "number"
          },
          "swapMemoryTotal": {
            "type": "number"
          },
          "memoryHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "meshPeerTotalCount": {
            "type": "number"
          },
          "meshPeerReachableCount": {
            "type": "number"
          },
          "meshHealth": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "transratingActiveCount": {
            "type": "number"
          },
          "transratingMaxCount": {
            "type": "number"
          },
          "recordings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "streamName": {
                  "type": "string"
                },
                "startDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "duration": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "sslMediaTransfer": {
            "type": "string"
          },
          "stbConnectorEnabled": {
            "type": "boolean"
          },
          "httpThroughputBitsPerSec": {
            "type": "number"
          },
          "httpConnectionCount": {
            "type": "number"
          },
          "throughputPhysicalBits": {
            "type": "number"
          },
          "meshStatistics": {
            "type": "object",
            "properties": {
              "clientHttpRequests": {
                "type": "number"
              },
              "clientHttpHits": {
                "type": "number"
              },
              "clientHttpErrors": {
                "type": "number"
              },
              "clientHttpKbitsIn": {
                "type": "number"
              },
              "clientHttpKbitsOut": {
                "type": "number"
              },
              "clientHttpAllMedianSvcTime": {
                "type": "number"
              },
              "clientHttpMissMedianSvcTime": {
                "type": "number"
              },
              "serverAllRequests": {
                "type": "number"
              },
              "serverAllErrors": {
                "type": "number"
              },
              "serverAllKbitsIn": {
                "type": "number"
              },
              "serverAllKbitsOut": {
                "type": "number"
              },
              "serverHttpRequests": {
                "type": "number"
              },
              "serverHttpErrors": {
                "type": "number"
              },
              "serverHttpKbitsIn": {
                "type": "number"
              },
              "serverHttpKbitsOut": {
                "type": "number"
              },
              "cpuTime": {
                "type": "number"
              },
              "hitsPercentageAllRequests": {
                "type": "number"
              },
              "hitsPercentageBitsSent": {
                "type": "number"
              },
              "memoryHitsPercentageHitRequests": {
                "type": "number"
              },
              "diskHitsPercentageHitRequests": {
                "type": "number"
              },
              "storageSwapSize": {
                "type": "number"
              },
              "storageSwapPercentageUsed": {
                "type": "number"
              },
              "storageMemSize": {
                "type": "number"
              },
              "storageMemPercentageUsed": {
                "type": "number"
              },
              "cacheMissesRatio": {
                "type": "number"
              },
              "cacheHits": {
                "type": "number"
              },
              "squidCpuUsage": {
                "type": "number"
              }
            }
          },
          "lockdownStatus": {
            "type": "string",
            "enum": [
              "Disabled",
              "Unsupported",
              "Locking",
              "Enabled",
              "Unlocking",
              "Error"
            ]
          },
          "lockdownStatusDetail": {
            "type": "string"
          },
          "hlsDistributions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "streamId": {
                  "type": "string"
                },
                "streamName": {
                  "type": "string"
                },
                "mediaId": {
                  "type": "string"
                },
                "mediaName": {
                  "type": "string"
                },
                "mediaSource": {
                  "type": "string"
                },
                "mediaSourceType": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "statusDetail": {
                  "type": "string"
                },
                "sourceUrl": {
                  "type": "string"
                },
                "playlistsReceived": {
                  "type": "number"
                },
                "segmentsReceived": {
                  "type": "number"
                },
                "eventPlaylistReceived": {
                  "type": "number"
                },
                "eventSegmentsReceived": {
                  "type": "number"
                },
                "eventPlaylistFetchErrors": {
                  "type": "number"
                },
                "eventSegmentFetchErrors": {
                  "type": "number"
                },
                "streamReconnects": {
                  "type": "number"
                },
                "enableMulticast": {
                  "type": "boolean"
                },
                "enableReflection": {
                  "type": "boolean"
                },
                "automaticMulticast": {
                  "type": "string",
                  "enum": [
                    "HighBitrate",
                    "LowBitrate"
                  ]
                },
                "eventStarted": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "serviceStatus": {
            "type": "object",
            "properties": {
              "servicesHealth": {
                "type": "string"
              },
              "services": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "active": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "stateStartTime": {
                      "type": "string"
                    },
                    "memory": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "numWorkers": {
            "type": "number"
          },
          "workers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "workerNum": {
                  "type": "number"
                },
                "numRequests": {
                  "type": "number"
                },
                "hitsPercentage": {
                  "type": "number"
                },
                "restarts": {
                  "type": "number"
                }
              }
            }
          },
          "streamStatus": {
            "type": "object",
            "properties": {
              "mpsStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "packetsDropped": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "packetsOk": {
                      "type": "number"
                    },
                    "uptime": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "farIp": {
                      "type": "string"
                    },
                    "farPort": {
                      "type": "number"
                    },
                    "nearPort": {
                      "type": "number"
                    }
                  }
                }
              },
              "hlsStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "masterStatus": {
                      "type": "string"
                    },
                    "cdn": {
                      "type": "object",
                      "properties": {
                        "isActive": {
                          "type": "number"
                        },
                        "pushUrl": {
                          "type": "string"
                        }
                      }
                    },
                    "subStreams": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "masterUrl": {
                      "type": "string"
                    },
                    "groupName": {
                      "type": "string"
                    },
                    "isMasterSub": {
                      "type": "number"
                    }
                  }
                }
              },
              "passthroughStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "reflectionData": {
                      "type": "object",
                      "properties": {
                        "playbackUrlPaths": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "path": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "eventConfig": {
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "number"
                        },
                        "mediaId": {
                          "type": "string"
                        },
                        "mediaSourceType": {
                          "type": "string"
                        },
                        "enableReflection": {
                          "type": "boolean"
                        },
                        "mediaName": {
                          "type": "string"
                        },
                        "autoMulticastConfig": {
                          "type": "object",
                          "properties": {
                            "packetSize": {
                              "type": "number"
                            },
                            "address": {
                              "type": "string"
                            },
                            "port": {
                              "type": "number"
                            },
                            "rendition": {
                              "type": "string"
                            }
                          }
                        },
                        "enableMulticast": {
                          "type": "boolean"
                        },
                        "sourceUrl": {
                          "type": "string"
                        },
                        "streamName": {
                          "type": "string"
                        },
                        "streamId": {
                          "type": "string"
                        },
                        "mediaSource": {
                          "type": "string"
                        }
                      }
                    },
                    "multicastPushData": {
                      "type": "object",
                      "properties": {
                        "rates": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "bitrate": {
                                "type": "number"
                              },
                              "segmentsSent": {
                                "type": "number"
                              },
                              "state": {
                                "type": "string"
                              },
                              "playlistsSent": {
                                "type": "number"
                              },
                              "playbackUrl": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "type": {
                      "type": "string"
                    },
                    "originData": {
                      "type": "object",
                      "properties": {
                        "sourceUrls": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "currentStatus": {
                          "type": "object",
                          "properties": {
                            "stateStartTime": {
                              "type": "number"
                            },
                            "stateElapsedTime": {
                              "type": "number"
                            },
                            "state": {
                              "type": "string"
                            },
                            "eventElapsedTime": {
                              "type": "number"
                            },
                            "statsEventTotal": {
                              "type": "object",
                              "properties": {
                                "segmentsFailed": {
                                  "type": "number"
                                },
                                "playlistsFailed": {
                                  "type": "number"
                                },
                                "playlistsReceived": {
                                  "type": "number"
                                },
                                "segmentsReceived": {
                                  "type": "number"
                                }
                              }
                            },
                            "statsWindowed": {
                              "type": "object",
                              "properties": {
                                "segmentsFailed": {
                                  "type": "number"
                                },
                                "playlistsFailed": {
                                  "type": "number"
                                },
                                "playlistsReceived": {
                                  "type": "number"
                                },
                                "segmentsReceived": {
                                  "type": "number"
                                }
                              }
                            },
                            "eventStartTime": {
                              "type": "number"
                            },
                            "statsStateTotal": {
                              "type": "object",
                              "properties": {
                                "segmentsFailed": {
                                  "type": "number"
                                },
                                "playlistsFailed": {
                                  "type": "number"
                                },
                                "playlistsReceived": {
                                  "type": "number"
                                },
                                "segmentsReceived": {
                                  "type": "number"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "enrichedStreams": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "typeNumeric": {
                      "type": "number"
                    },
                    "stateStartTime": {
                      "type": "number"
                    },
                    "inputStream": {
                      "type": "string"
                    },
                    "totalPktsTx": {
                      "type": "number"
                    },
                    "status": {
                      "type": "string"
                    },
                    "totalEventTime": {
                      "type": "number"
                    },
                    "mediaId": {
                      "type": "string"
                    },
                    "mediaName": {
                      "type": "string"
                    },
                    "packetsOk": {
                      "type": "number"
                    },
                    "totalPktsDropped": {
                      "type": "number"
                    },
                    "enrichmentType": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    },
                    "startTime": {
                      "type": "string"
                    },
                    "reconnectAttempts": {
                      "type": "number"
                    },
                    "typeVerbose": {
                      "type": "string"
                    },
                    "packetsDropped": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    },
                    "duration": {
                      "type": "number"
                    },
                    "timeInCurrentState": {
                      "type": "number"
                    },
                    "enrichmentRequestId": {
                      "type": "string"
                    },
                    "connectionHistory": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "packetsDropped": {
                            "type": "number"
                          },
                          "packetsTx": {
                            "type": "number"
                          },
                          "connectionStartTime": {
                            "type": "number"
                          },
                          "connectionEndTime": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "dmedevicesresponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dmedevice"
            }
          }
        }
      },
      "dmedevice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "macAddress": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "prepositionContent": {
            "type": "boolean"
          },
          "isVideoStorageDevice": {
            "type": "boolean"
          },
          "dMEStatus": {
            "$ref": "#/components/schemas/dmeHealthStatus"
          }
        }
      },
      "newZoneDevices": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "deviceType": {
            "type": "string"
          },
          "VideoStreams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "newDmeDevice": {
        "type": "object",
        "required": [
          "name",
          "macAddress"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "DME device name"
          },
          "macAddress": {
            "type": "string",
            "description": "MAC address for the DME. Must be unique to the Rev account."
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. Specifies if the DME is currently active."
          },
          "prepositionContent": {
            "type": "boolean",
            "description": "Default=false. Specifies if the DME should preposition content."
          },
          "isVideoStorageDevice": {
            "type": "boolean",
            "description": "Default=false. Specifies the DME as a storage device."
          },
          "manualVideoStreams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dmeVideoStream"
            }
          },
          "VideoStreamGroupsToAdd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dmeVideoStreamGroup"
            }
          }
        }
      },
      "dmeVideoStream": {
        "type": "object",
        "description": "Used to manually add video streams to the DME.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive name for the stream"
          },
          "url": {
            "type": "string",
            "description": "URL of the stream"
          },
          "encodingType": {
            "type": "string",
            "description": "Encoding type of the stream.  Values can be [h264, hls, hds, h264ts, mpeg4, mpeg2, wm]"
          },
          "isMulticast": {
            "type": "boolean",
            "description": "Specifies if the stream is a multicast stream"
          }
        }
      },
      "dmeVideoStreamGroup": {
        "type": "object",
        "description": "Used to add an HLS stream, required for mobile devices.  This is not added by default.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Stream name"
          },
          "hasHls": {
            "type": "boolean",
            "description": "Specify if an HLS stream is created"
          }
        }
      },
      "newDmeDeviceResponse": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string"
          }
        }
      },
      "dateObj": {
        "type": "object",
        "properties": {
          "when": {
            "type": "string",
            "format": "date-time"
          },
          "principal": {
            "type": "string"
          }
        }
      },
      "categoriesResponse": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          }
        }
      },
      "event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "htmlDescription": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "presentationProfileId": {
            "type": "string"
          },
          "eventAdminIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "primaryHostId": {
            "type": "string"
          },
          "automatedWebcast": {
            "type": "boolean"
          },
          "closedCaptionsEnabled": {
            "type": "boolean"
          },
          "pollsEnabled": {
            "type": "boolean"
          },
          "chatEnabled": {
            "type": "boolean"
          },
          "questionOption": {
            "type": "string",
            "description": "This is an enum and can have the following values: IDENTIFIED/SELFSELECT/ANONYMOUS"
          },
          "questionAndAnswerEnabled": {
            "type": "boolean"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "moderatorIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "accessControl": {
            "type": "string",
            "description": "This sets access control for the video. This is an enum and can have the following values: Public/TrustedPublic/AllUsers/Private. TrustedPublic option is only available to Partners at this time."
          },
          "eventUrl": {
            "type": "string"
          },
          "icsFileUrl": {
            "type": "string"
          },
          "vcSipAddress": {
            "type": "string"
          },
          "vcMicrosoftTeamsMeetingUrl": {
            "type": "string"
          },
          "videoSourceType": {
            "type": "string",
            "description": "This is an enum and can have the following values: PresentationProfile/Rtmp/SipAddress/WebexTeam/WebexLiveStream/Zoom.  This field is required to create/edit WebexLiveStream event."
          },
          "rtmp": {
            "$ref": "#/components/schemas/rtmp"
          },
          "webcastType": {
            "$ref": "#/components/schemas/webcastType"
          },
          "webexTeam": {
            "$ref": "#/components/schemas/webexTeam"
          },
          "zoom": {
            "$ref": "#/components/schemas/zoom"
          },
          "backgroundImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scaledImage"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "type": "boolean"
          },
          "estimatedAttendees": {
            "type": "integer"
          },
          "lobbyTimeMinutes": {
            "type": "integer"
          },
          "webcastPreProduction": {
            "$ref": "#/components/schemas/webcastPreProduction"
          },
          "shortcutName": {
            "type": "string"
          },
          "shortcutNameUrl": {
            "type": "string"
          },
          "linkedVideoId": {
            "type": "string"
          },
          "autoAssociateVod": {
            "type": "boolean"
          },
          "redirectVod": {
            "type": "boolean"
          },
          "recordingUploaderUserId": {
            "type": "string"
          },
          "presentationFileDownloadAllowed": {
            "type": "boolean"
          },
          "registrationFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webcastRegistrationField"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiCustomFields"
            }
          },
          "liveSubtitles": {
            "type": "object",
            "$ref": "#/components/schemas/liveSubtitles",
            "description": "Live Subtitles properties of the webcast."
          },
          "autoplay": {
            "type": "boolean"
          },
          "disableAutoRecording": {
            "type": "boolean",
            "description": "Default=false. If false, the webcast is automatically recorded. <p>Note: When false, attempted use of the <a href=/reference/startrecordingevent>Start Webcast Recording</a> endpoint generates an error."
          },
          "hideShareUrl": {
            "type": "boolean"
          },
          "enableCustomBranding": {
            "type": "boolean"
          },
          "brandingSettings": {
            "type": "object",
            "properties": {
              "headerColor": {
                "type": "string",
                "description": "Event Primary Color"
              },
              "headerFontColor": {
                "type": "string",
                "description": "Event Header Text Color"
              },
              "primaryFontColor": {
                "type": "string",
                "description": "Event Text Color"
              },
              "accentColor": {
                "type": "string",
                "description": "Event Accent Color"
              },
              "accentFontColor": {
                "type": "string",
                "description": "Event Accent Font Color"
              },
              "primaryColor": {
                "type": "string",
                "description": "Event Header Background Color"
              },
              "logos": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/scaledImage"
                }
              },
              "allowPreRegistration": {
                "type": "boolean"
              },
              "emailToPreRegistrants": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "eventQuestion": {
        "type": "object",
        "properties": {
          "whenAsked": {
            "type": "string",
            "format": "date-time"
          },
          "question": {
            "type": "string"
          },
          "askedBy": {
            "type": "string"
          },
          "repliedBy": {
            "type": "string"
          },
          "lastAction": {
            "type": "string"
          },
          "reply": {
            "type": "string"
          },
          "isPublic": {
            "type": "boolean"
          }
        }
      },
      "eventPoll": {
        "type": "object",
        "properties": {
          "question": {
            "type": "string"
          },
          "totalResponses": {
            "type": "integer"
          },
          "totalNoResponses": {
            "type": "integer"
          },
          "allowMultipleAnswers": {
            "type": "boolean"
          },
          "pollAnswers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "answer": {
                  "type": "string"
                },
                "votes": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "eventComment": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "eventStatus": {
        "type": "object",
        "properties": {
          "eventTitle": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventStatus": {
            "type": "string",
            "enum": [
              "Scheduled",
              "Starting",
              "InProgress",
              "Broadcasting",
              "Deleted",
              "Recording",
              "RecordingStarting",
              "RecordingStopping",
              "VideoSourceStarting",
              "WaitingForStream",
              "Completed"
            ]
          },
          "slideUrl": {
            "type": "string"
          },
          "isPreProduction": {
            "type": "boolean"
          },
          "sbmlResponse": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          }
        }
      },
      "liveSubtitles": {
        "type": "object",
        "description": "For enabling live subtitles on the webcast. Enabling subtitles requires Rev IQ license hours.",
        "properties": {
          "sourceLanguage": {
            "type": "string",
            "description": "Language code. View <a href=/docs/supported-languages>Supported Languages</a> for source languages in Technical Requirements."
          },
          "translationLanguages": {
            "type": "array",
            "description": "Language code. View <a href=/docs/supported-languages>Supported Languages</a> for translation languages in Technical Requirements.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "patchRequest": {
        "type": "array",
        "description": "Refer to http://jsonpatch.com/ for the format of the request body.",
        "items": {
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Operations supported: [add, remove, copy, replace, test, move]"
            },
            "path": {
              "type": "string",
              "description": "Example: <code>path: /FirstName</code>"
            },
            "value": {
              "type": "string",
              "description": "Example: <code>value: Jason</code>"
            }
          }
        }
      },
      "playback": {
        "type": "object",
        "properties": {
          "Label": {
            "type": "string"
          },
          "QValue": {
            "type": "integer"
          },
          "Player": {
            "type": "string",
            "enum": [
              "Native",
              "Vbrick",
              "NativeIos",
              "NativeAndriod",
              "NativeMfStb"
            ]
          },
          "Url": {
            "type": "string"
          },
          "ZoneId": {
            "type": "string"
          },
          "SlideDelaySeconds": {
            "type": "integer"
          },
          "VideoFormat": {
            "type": "string"
          },
          "VideoInstanceId": {
            "type": "string"
          },
          "DeviceId": {
            "type": "string"
          }
        }
      },
      "createEditEventRequest": {
        "type": "object",
        "required": [
          "title",
          "startDate",
          "endDate",
          "accessControl",
          "eventAdminIds"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Webcast title"
          },
          "description": {
            "type": "string",
            "description": "Extended description for your webcast that displays as part of the Webcast Landing page before the event starts and as part of the Event Details section after broadcasting begins. The description also becomes part of the invitation text to attendees."
          },
          "startDate": {
            "type": "string",
            "description": "Must match this format: <code>YYYY-DD-MMT00:00:00Z</code>",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Must match this format: <code>YYYY-DD-MMT00:00:00Z</code>",
            "format": "date-time"
          },
          "presentationProfileId": {
            "type": "string",
            "description": "GUID for the presentation profile. Only required when Presentation Profile selected as a videoSourceType."
          },
          "eventAdminIds": {
            "type": "array",
            "description": "Array of user Ids for the Webcast admins. If no Ids are passed, eventAdminEmails are checked.",
            "items": {
              "type": "string"
            }
          },
          "eventAdminEmails": {
            "type": "array",
            "description": "DEPRECATED",
            "items": {
              "type": "string"
            }
          },
          "eventAdmins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/hostAccessEntity"
            }
          },
          "automatedWebcast": {
            "type": "boolean",
            "description": "Default=false. Enabled if Presentation Profile used as a video source and if you want the event to begin broadcasting at the appointed start time on its own without an Event Host to start it."
          },
          "closedCaptionsEnabled": {
            "type": "boolean",
            "description": "Default=false. Specifies if closed captions are enabled when Presentation Profile used as a video source."
          },
          "pollsEnabled": {
            "type": "boolean",
            "description": "Default=false. Select to enable polls in the webcast."
          },
          "chatEnabled": {
            "type": "boolean",
            "description": "Default=true. Select to enable chat in the webcast."
          },
          "questionAndAnswerEnabled": {
            "type": "boolean",
            "description": "Default=false, Select to enable Q&A feature in the webcast"
          },
          "userIds": {
            "type": "array",
            "description": "Ids for users on the access control list. Only used with Private events.",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Ids for groups on the access control list. Only used with Private events.",
            "items": {
              "type": "string"
            }
          },
          "moderatorIds": {
            "type": "array",
            "description": "Ids for users that will serve as webcast moderators.",
            "items": {
              "type": "string"
            }
          },
          "moderators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userAccessEntity"
            }
          },
          "password": {
            "type": "string",
            "description": "Used only if isPublic is set to true."
          },
          "accessControl": {
            "type": "string",
            "description": "Sets access control for the webcast. This is an enum and can have the following values: Public/TrustedPublic/AllUsers/Private.<p>Note: TrustedPublic is only applicable for Partners.</p>"
          },
          "vcSipAddress": {
            "type": "string",
            "description": "SIP address if recording a video conference as the source. Only required if SipAddress is the videoSourceType."
          },
          "videoSourceType": {
            "type": "string",
            "description": "This is an enum and can have the following values: [PresentationProfile, Rtmp, SipAddress, WebexTeam, WebexLiveStream, Zoom] <p>This field is required to create/edit WebexLiveStream event.</p>"
          },
          "isSecureRtmp": {
            "type": "boolean",
            "description": "Default=true, Specifies if the RTMP based webcast should use RTMPS or RTMP. True will set to RTMPS and false will set to RTMP."
          },
          "webcastType": {
            "$ref": "#/components/schemas/webcastType"
          },
          "webexTeam": {
            "$ref": "#/components/schemas/webexTeam"
          },
          "zoom": {
            "$ref": "#/components/schemas/zoom"
          },
          "questionOption": {
            "type": "string",
            "description": "This is an enum and can have the following values: [IDENTIFIED, SELFSELECT, ANONYMOUS]"
          },
          "presentationFileDownloadAllowed": {
            "type": "boolean",
            "description": "Specifies if a presentation attached to the webcast is downloadable"
          },
          "categories": {
            "type": "array",
            "description": "Array of categoryIds to assign the event to. If you use categoryIds and they do not exist/are incorrect, the request is rejected. The request is also rejected if you do not have contribute rights to a restricted/secure category and you attempt to add/edit or otherwise modify it.",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "Array of tag Ids to assign the event to. Can assign to multiple tags.",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "type": "boolean",
            "description": "Specifies if the webcast is unlisted. If it is unlisted, prevents it from being displayed to all Media Contributors, Media Viewers, and Event Hosts that did not create the Webcast. Further, resulting videos recorded are not visible or searchable in the Rev UI."
          },
          "estimatedAttendees": {
            "type": "integer",
            "description": "Number between 0 and 1000000. Allows you to estimate the number of people that will attend so technical resources can be adjusted as needed."
          },
          "lobbyTimeMinutes": {
            "type": "integer",
            "description": "May not exceed 120. Period of time before a Webcast starts when attendees are permitted to join the event."
          },
          "preProduction": {
            "$ref": "#/components/schemas/webcastPreProduction"
          },
          "shorcutName": {
            "type": "string",
            "description": "Creates a custom event-friendly URL for a Webcast that makes it easier to remember for attendees. May be reused for multiple events as long as they do not conflict in date and time.<p>This Url is returned in the parameter shortcutNameUrl when the <a href=/reference/getevent>Get Webcast Details</a> endpoint is untilized."
          },
          "linkedVideoId": {
            "type": "string",
            "description": "Use to set the Id of a video that is linked/associated to a Webcast that has finished recording."
          },
          "autoAssociateVod": {
            "type": "boolean",
            "description": "When true, the video in LinkedVideoId is automatically linked to a Webcast after it has concluded."
          },
          "redirectVod": {
            "type": "boolean",
            "description": "When true, users that access the Webcast are automatically redirected to the video set in LinkedVideoId. If false, they are directed the Webcast Landing page instead."
          },
          "registrationFieldIds": {
            "type": "array",
            "description": "If accessControl is set to Public, you can add custom fields to the Webcast to collect more data from public attendees. Use Ids returned in the <a href=/reference/createwebcastregistrationfield>Add Webcast Registration Fields</a> endpoint to specify the fields to use.",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/uploadCustomFields"
            }
          },
          "liveSubtitles": {
            "type": "object",
            "$ref": "#/components/schemas/liveSubtitles"
          },
          "autoplay": {
            "type": "boolean",
            "description": "Determines how a broadcasting Webcast behaves when a viewer joins. Enabled, it plays immediately and is muted. Disabled, there is a button to start the Webcast and it is not muted."
          },
          "disableAutoRecording": {
            "type": "boolean",
            "description": "Default=false. If false, the webcast is automatically recorded. <p>Note: When false, attempted use of the <a href=/reference/startrecordingevent>Start Webcast Recording</a> endpoint generates an error."
          },
          "hideShareUrl": {
            "type": "boolean",
            "description": "Default=false. When true, the Webcast URL is hidden on the Event Details page that is displayed to attendees while it is broadcasting."
          },
          "recordingUploaderUserId": {
            "type": "string",
            "description": "Id of the user who is set as the uploader for the event recording."
          },
          "recordingUploaderUserEmail": {
            "type": "string",
            "description": "Used if recordingUploaderUserId is not provided. Email of the user who is set as the uploader for the event recording."
          },
          "allowPreRegistration": {
            "type": "boolean",
            "description": "Default=false. If accessControl is set to Public, you can allow attendees to register for the upcoming webcast event earlier than the scheduled day of the event. Once set to true, this cannot be set back to false."
          },
          "emailToPreRegistrants": {
            "type": "boolean",
            "description": "Default=false. If allowPreRegistration set to true, then only we can set emailToPreRegistrants to true. If true then registrants will automatically receive an email with the details they need to join the event."
          }
        }
      },
      "editEventRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/createEditEventRequest"
          },
          {
            "properties": {
              "regenerateRtmpUrlAndKey": {
                "type": "boolean",
                "description": "Default=false, Specifies if the exiting RTMP based webcast URL and Key needs to be regenerated."
              }
            }
          }
        ]
      },
      "userAccessEntity": {
        "type": "object",
        "description": "Array of users who are moderators. This is equivalent to Panelists in Webex.<p>Note: For Partners, auto creation of hosts/moderators occurs if user is not in Rev and new fields are used. This is only available for Account Admins. Email and lastName are required for user auto creation.</p>",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "hostAccessEntity": {
        "type": "object",
        "description": "Array of users who are Webex Hosts and Co-hosts (In Vbrick, Event Admins).",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "To be set to true for 1 eventAdmin in the list of eventAdmins when sending the request. The user (Webex Host) with isPrimary set to true is the Primary Host of the event and rest of the users are the co-hosts. Only one eventAdmin (Webex Host) in this list can be set to Primary."
          }
        }
      },
      "eventResponse": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          }
        }
      },
      "deleteEventsRequest": {
        "type": "object",
        "description": "At least <em>one</em> of the parameters should be specified in the request. If all of the search terms are not provided in the request, a Bad Request response is returned by Rev.  If both the startDate and endDate search terms are not provided, they are defaulted to set a range equal to one year (i.e. 365 days).",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or after the date specified. Value should be less than or equal to endDate. If not specified, it assumes a value of endDate - 365 days."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or before the date specified. Value should be greater than or equal to startDate. If not specified, it assumes a value of the current date."
          },
          "customFields": {
            "type": "array",
            "description": "List of custom fields to use when searching for events to delete. All of the fields provided are concatenated as AND in the search request. The value to the property 'Value' is required.",
            "items": {
              "$ref": "#/components/schemas/uploadCustomFields"
            }
          }
        }
      },
      "deleteEventsResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "statusUrl": {
            "type": "string"
          }
        }
      },
      "deleteWebcastsJobStatusResponse": {
        "type": "object",
        "properties": {
          "jobId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Initialized",
              "InProgress",
              "Completed"
            ]
          },
          "count": {
            "type": "number"
          },
          "processedCount": {
            "type": "number"
          },
          "failedCount": {
            "type": "number"
          },
          "remainingCount": {
            "type": "number"
          }
        }
      },
      "eventAccessControlEntitiesRequest": {
        "type": "object",
        "description": "Use to provide updates to Access Controls of Private Events.",
        "properties": {
          "userIds": {
            "type": "array",
            "description": "User Ids on the access control list",
            "items": {
              "type": "string"
            }
          },
          "usernames": {
            "type": "array",
            "description": "Usernames for users on the access control list",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Group Ids on the access control list",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "eventLinkedVideo": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "description": "Id of video to replace on webcast"
          },
          "redirectVod": {
            "type": "boolean",
            "description": "Default=true. Specify whether or not to redirect to the video automatically. If false, the user is taken to the Webcast Landing page instead."
          }
        }
      },
      "accessControlEntitiesRequest": {
        "type": "object",
        "properties": {
          "AccessControl": {
            "type": "string",
            "enum": [
              "Public",
              "AllUsers",
              "Private"
            ],
            "description": "This sets access control for the video. This is an enum and can have the following values: <code>Public/AllUsers/Private</code>. <p>A value of <strong>AllUsers</strong> is equal to all internal/authenticated users. A value of <strong>Private</strong> allows access to those Users, Groups, and Channels <em>explicitly</em> identified.</p><p> Be aware that you can assign multiple Users, Groups, and Channels in the <strong>accessControlEntites</strong> parameter in addition to the <strong>AllUser</strong> or <strong>Public</strong> settings. If no value is set, the default is <strong>Private</strong>.</p> <p>In the case of an incorrect value, the call is rejected with an HTTP 400 error.</p><p><strong>Note:</strong> If <strong>Channels</strong> is set at the videoAccessControl, it is translated to <strong>Private</strong> and a Channel <em>must</em> be specified in the accessControlEntities. If a Channel is included in the accessControlEntities, then the canEdit parameter is ignored.</p>"
          },
          "AccessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiAccessControlEntity"
            }
          },
          "Password": {
            "type": "string",
            "description": "Only videos with Public access control can update the password with a value"
          }
        }
      },
      "approvalTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of approval template"
          },
          "name": {
            "type": "string",
            "description": "Name of  approval template"
          }
        }
      },
      "pendingVideos": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of video"
          },
          "title": {
            "type": "string",
            "description": "Title of video"
          },
          "htmlDescription": {
            "type": "string",
            "description": "Description of video"
          },
          "approvalStatus": {
            "type": "string",
            "description": "Approval Status of video"
          },
          "ApprovalProcessName": {
            "type": "string",
            "description": "Approval process name"
          },
          "ApprovalProcessStepName": {
            "type": "string",
            "description": "Current approval process step name"
          },
          "ApprovalProcessStepNumber": {
            "type": "integer",
            "description": "Current approval process step number"
          },
          "ApprovalProcessStepsCount": {
            "type": "integer",
            "description": "Total number of steps in the approval process"
          }
        }
      },
      "apiAccessControlEntity": {
        "type": "object",
        "description": "This provides explicit rights to a <strong>User/Group/Channel</strong> along with editing rights <strong>(CanEdit)</strong> to a video. If any value is invalid, it is rejected while valid values are still associated with the video.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of access control entity to give access to"
          },
          "name": {
            "type": "string",
            "description": "Name of access control entity to give access to (used <em>only</em> if the id is not known)"
          },
          "type": {
            "type": "string",
            "enum": [
              "User",
              "Group",
              "Channel"
            ],
            "description": "Type of entity to be updated: <code>User/Group/Channel</code>"
          },
          "canEdit": {
            "type": "boolean",
            "description": "Specifies whether or not the entity is granted edit ability and should be true or false. (Include either id or name, both are not required)"
          }
        }
      },
      "categoryPolicyItem": {
        "type": "object",
        "description": "Used to add or update the users/groups that may manage restricted categories.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of access control entity to give access to"
          },
          "type": {
            "type": "string",
            "description": "Type of entity (user/group)",
            "enum": [
              "User",
              "Group"
            ]
          },
          "itemType": {
            "type": "string",
            "description": "Category role. Can be a <code>CategoryContributor</code> or <code>CategoryManager</code>. Only managers can edit the category itself, along with its content.",
            "enum": [
              "CategoryContributor",
              "CategoryManager"
            ]
          }
        }
      },
      "categoryPathsItem": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Id of category"
          },
          "name": {
            "type": "string",
            "description": "Name of category"
          },
          "fullPath": {
            "type": "string",
            "description": "Full path with hierarchy"
          }
        }
      },
      "webcastBrandingDetails": {
        "type": "object",
        "properties": {
          "headerColor": {
            "type": "string",
            "description": "Event Primary Color"
          },
          "headerFontColor": {
            "type": "string",
            "description": "Event Header Text Color"
          },
          "primaryFontColor": {
            "type": "string",
            "description": "Event Text Color"
          },
          "accentColor": {
            "type": "string",
            "description": "Event Accent Color"
          },
          "accentFontColor": {
            "type": "string",
            "description": "Event Accent Font Color"
          },
          "primaryColor": {
            "type": "string",
            "description": "Event Header Background Color"
          },
          "logoImageFilename": {
            "type": "string",
            "description": "Logo Image Filename"
          },
          "backgroundImageFilename": {
            "type": "string",
            "description": "Background Image Filename"
          }
        }
      },
      "eventList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of event"
          },
          "title": {
            "type": "string",
            "description": "Title of event"
          },
          "description": {
            "type": "string",
            "description": "Description of event"
          },
          "startDate": {
            "type": "string",
            "description": "Event Start Date",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "Event End Date",
            "format": "date-time"
          },
          "listingType": {
            "type": "string",
            "enum": [
              "Public",
              "TrustedPublic",
              "AllUsers",
              "Private"
            ],
            "description": "This is an access control enum and can have the following values: Public/TrustedPublic/AllUsers/Private. TrustedPublic option is only available for Partners and WebexEvents type webcasts."
          },
          "eventUrl": {
            "type": "string",
            "description": "url of event"
          },
          "backgroundImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scaledImage"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unlisted": {
            "type": "boolean"
          },
          "estimatedAttendees": {
            "type": "integer"
          },
          "lobbyTimeMinutes": {
            "type": "integer"
          },
          "preProduction": {
            "$ref": "#/components/schemas/webcastPreProduction"
          },
          "shortcutName": {
            "type": "string"
          },
          "videoSourceType": {
            "type": "string",
            "description": "This is an enum and can have the following values: PresentationProfile/Rtmp/SipAddress/WebexTeam/WebexLiveStream/Zoom.  This field is required to create/edit WebexLiveStream event."
          },
          "rtmp": {
            "$ref": "#/components/schemas/rtmp"
          },
          "webcastType": {
            "$ref": "#/components/schemas/webcastType"
          },
          "webexTeam": {
            "$ref": "#/components/schemas/webexTeam"
          },
          "zoom": {
            "$ref": "#/components/schemas/zoom"
          }
        }
      },
      "searchWebcastsRequest": {
        "type": "object",
        "description": "At least one of the parameters should be specified in the request. If all of the search terms are not provided in the request, a Bad Request response is returned by Rev.  If both the startDate and endDate search terms are not provided, they are defaulted to set a range equal to one year (i.e. 365 days).",
        "properties": {
          "scrollId": {
            "type": "string",
            "description": "The scrollId returned in first request to search. This can be passed in subsequent requests to fetch next set of results. This is forward only and you cannot get back the search results that are scrolled once."
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or after the date specified. Value should be less than or equal to endDate. If not specified, it assumes a value of endDate - 365 days."
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "Search parameter to use to match those events that are set to start on or before the date specified. Value should be greater than or equal to startDate. If not specified, it assumes a value of the current date."
          },
          "sortField": {
            "type": "string",
            "description": "Name of the field in the event that will be used to sort the dataset in the response. Default is 'Title'"
          },
          "sortDirection": {
            "type": "string",
            "description": "Sort direction of the dataset. Values supported: 'asc' and 'desc'. Default is 'asc'."
          },
          "size": {
            "type": "number",
            "description": "Number of records in the dataset to return per search request. Default is 100, minimum is 50 and maximum is 500."
          },
          "customFields": {
            "type": "array",
            "description": "List of custom fields to use when searching for events. All of the fields provided are concatenated as AND in the search request. The value to the property 'Value' is required.",
            "items": {
              "$ref": "#/components/schemas/uploadCustomFields"
            }
          }
        }
      },
      "searchWebcastsResponse": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Id of event"
                },
                "title": {
                  "type": "string",
                  "description": "Title of event"
                },
                "description": {
                  "type": "string",
                  "description": "Description of event"
                },
                "startDate": {
                  "type": "string",
                  "description": "Event Start Date",
                  "format": "date-time"
                },
                "endDate": {
                  "type": "string",
                  "description": "Event End Date",
                  "format": "date-time"
                },
                "listingType": {
                  "type": "string",
                  "description": "This is an access control enum and can have the following values: Public/TrustedPublic/AllUsers/Private. TrustedPublic option is only available to Partners at this time."
                },
                "eventUrl": {
                  "type": "string",
                  "description": "url of event"
                },
                "backgroundImages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/scaledImage"
                  }
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "unlisted": {
                  "type": "boolean"
                },
                "estimatedAttendees": {
                  "type": "integer"
                },
                "lobbyTimeMinutes": {
                  "type": "integer"
                },
                "preProduction": {
                  "$ref": "#/components/schemas/webcastPreProduction"
                },
                "shorcutName": {
                  "type": "string"
                },
                "shortcutNameUrl": {
                  "type": "string"
                },
                "linkedVideoId": {
                  "type": "string"
                },
                "autoAssociateVod": {
                  "type": "boolean"
                },
                "redirectVod": {
                  "type": "boolean"
                },
                "customFields": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/apiCustomFields"
                  }
                },
                "webcastType": {
                  "$ref": "#/components/schemas/webcastType"
                }
              }
            }
          }
        }
      },
      "rtmp": {
        "type": "object",
        "description": "Used if recording a rtmp stream as the video source.",
        "properties": {
          "url": {
            "type": "string",
            "description": "The RTMP push Url to use with the scheduled event."
          },
          "key": {
            "type": "string",
            "description": "The RTMP Stream key to secure the RTMP push Url."
          }
        }
      },
      "webcastType": {
        "type": "string",
        "description": "Scheduled event type used for integrations, default value is Rev.",
        "enum": [
          "Rev",
          "WebexEvents"
        ]
      },
      "webexTeam": {
        "type": "object",
        "description": "Used if recording a Webex Team meeting as the video source.",
        "properties": {
          "roomId": {
            "type": "string",
            "description": "Webex Team room Id, required."
          },
          "name": {
            "type": "string",
            "description": "Webex Team room name, optional."
          }
        }
      },
      "zoom": {
        "type": "object",
        "description": "Used if recording a Zoom meeting as the video source.",
        "properties": {
          "meetingId": {
            "type": "string",
            "description": "Zoom meeting Id, required."
          },
          "meetingPassword": {
            "type": "string",
            "description": "Zoom meeting password, optional."
          }
        }
      },
      "webcastPreProduction": {
        "type": "object",
        "description": "Use if creating a pre-production event to set designated pre-production attendees and duration.",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Timespan in hours and minutes that the pre-production webcast occurs before the Main webcast begins (Example: <code>04:00:00</code>, <code>1.06:00:00</code>)"
          },
          "userIds": {
            "type": "array",
            "description": "User Ids of pre-production attendees",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "type": "array",
            "description": "Group Ids of pre-production attendees",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "scaledImage": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "scaleSize": {
            "type": "string",
            "enum": [
              "Original",
              "ExtraSmall",
              "Small",
              "Medium",
              "Large"
            ]
          }
        }
      },
      "eventAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of event admin"
          },
          "name": {
            "type": "string",
            "description": "name of event admin"
          },
          "username": {
            "type": "string",
            "description": "username of event admin"
          }
        }
      },
      "eventSession": {
        "type": "object",
        "properties": {
          "userType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "deviceAccessed": {
            "type": "string"
          },
          "streamAccessed": {
            "type": "string"
          },
          "sessionTime": {
            "type": "string"
          },
          "enteredDate": {
            "type": "string",
            "format": "date-time"
          },
          "exitedDate": {
            "type": "string",
            "format": "date-time"
          },
          "viewingTime": {
            "type": "string"
          }
        }
      },
      "eventSessionsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/eventSession"
        }
      },
      "postEventSession": {
        "type": "object",
        "properties": {
          "userType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ipAddress": {
            "type": "string"
          },
          "browser": {
            "type": "string"
          },
          "deviceType": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          },
          "deviceAccessed": {
            "type": "string"
          },
          "streamAccessed": {
            "type": "string"
          },
          "sessionTime": {
            "type": "string"
          },
          "viewingTime": {
            "type": "string"
          },
          "enteredDate": {
            "type": "string",
            "format": "date-time"
          },
          "exitedDate": {
            "type": "string",
            "format": "date-time"
          },
          "viewingStartTime": {
            "type": "string",
            "format": "date-time"
          },
          "experiencedErrors": {
            "type": "integer"
          },
          "multicastErrors": {
            "type": "integer"
          },
          "bufferEvents": {
            "type": "integer"
          },
          "rebufferEvents": {
            "type": "integer"
          },
          "rebufferDuration": {
            "type": "integer"
          },
          "attendeeType": {
            "type": "string",
            "enum": [
              "Host",
              "Moderator",
              "AccountAdmin",
              "Attendee"
            ]
          }
        }
      },
      "postEventSessionsResponse": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/postEventSession"
            }
          },
          "totalSessions": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          }
        }
      },
      "postEventSessionsBadRequest": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalSessions": {
            "type": "integer"
          },
          "errorDescription": {
            "type": "string"
          }
        }
      },
      "realtimeAttendeesSearchRequest": {
        "type": "object",
        "properties": {
          "sortField": {
            "type": "string",
            "description": "Default=Full Name"
          },
          "sortDirection": {
            "type": "string",
            "description": "How data is sorted in the response. Supported Values: 'asc', 'desc'. Default is 'asc'"
          },
          "count": {
            "type": "number",
            "description": "Number of matching records to return in the response. Default is 50. Maximum is 500."
          },
          "scrollId": {
            "type": "string"
          },
          "q": {
            "type": "string",
            "description": "Search query. When specified, searches the Search Fields for the specified string."
          },
          "searchField": {
            "type": "string",
            "description": "A comma-separated list of fields to include in search. <p>Supported fields: 'FullName', 'Email', 'ZoneName', 'StreamType', 'IpAddress', 'Browser', 'OsFamily', 'StreamAccessed', 'PlayerDevice', 'OsName', 'UserType', 'Username', 'AttendeeType'</p>"
          },
          "runNumber": {
            "type": "number",
            "description": "The current run of the referred event. Defaults to Main Event runNumber(0). Should be passed for pre-production."
          },
          "status": {
            "type": "string",
            "description": "User session status. Supported values: 'All', 'Online', 'Offline'. Default is 'All'."
          },
          "attendeeDetails": {
            "type": "string",
            "enum": [
              "All",
              "Base",
              "Counts"
            ],
            "description": "The shape of data to return in the response. Supported values: 'Base', 'All' and 'Counts'. Default is 'Base'. 'Counts' returns total count for host (hostCount), moderator (moderatorCount), and attendees (attendeeCount). 'Base' returns just 'UserId', 'Username', 'Email', 'StartTime', 'SessionId', 'FullName'. The values for the total count are also included. 'All includes 'Base' details, metrics, session, system, and user details. The values for the total count are also included."
          }
        }
      },
      "realtimeAttendeesSearchResponse": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "hostCount": {
            "type": "number"
          },
          "moderatorCount": {
            "type": "number"
          },
          "attendeeCount": {
            "type": "number",
            "description": "The sum of the count of attendee and account admin in user type."
          },
          "attendees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "UserId": {
                  "type": "string"
                },
                "Username": {
                  "type": "string"
                },
                "FullName": {
                  "type": "string"
                },
                "UserType": {
                  "type": "string"
                },
                "AttendeeType": {
                  "type": "string",
                  "enum": [
                    "Host",
                    "Moderator",
                    "AccountAdmin",
                    "Attendee"
                  ]
                },
                "Email": {
                  "type": "string"
                },
                "StartTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "Status": {
                  "type": "string"
                },
                "ExperiencedErrors": {
                  "type": "number"
                },
                "MulticastFailovers": {
                  "type": "number"
                },
                "ExperiencedBufferingDuration": {
                  "type": "number"
                },
                "ExperiencedBufferingCount": {
                  "type": "number"
                },
                "AvgExperiencedBufferingDuration": {
                  "type": "number"
                },
                "AvgBitrateKbps": {
                  "type": "number"
                },
                "AvgBandwidthMbps": {
                  "type": "number"
                },
                "ViewingStartTime": {
                  "type": "string",
                  "format": "date-time"
                },
                "ZoneId": {
                  "type": "string"
                },
                "ZoneName": {
                  "type": "string"
                },
                "IpAddress": {
                  "type": "string"
                },
                "StreamDevice": {
                  "type": "string"
                },
                "StreamAccessed": {
                  "type": "string"
                },
                "PlayerDevice": {
                  "type": "string"
                },
                "Browser": {
                  "type": "string"
                },
                "VideoPlayer": {
                  "type": "string"
                },
                "VideoFormat": {
                  "type": "string"
                },
                "UserAgent": {
                  "type": "string"
                },
                "OsName": {
                  "type": "string"
                },
                "OsFamily": {
                  "type": "string"
                },
                "DeviceId": {
                  "type": "string"
                },
                "RevConnect": {
                  "type": "boolean"
                },
                "StreamType": {
                  "type": "string"
                },
                "SessionId": {
                  "type": "string"
                },
                "ProfileImageUrl": {
                  "type": "string"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "description": "Indicates the state of the real-time aggregation of a webcast. Possible values: 'Active', 'Initiated'. Active = webcast is currently aggregating. Initiated = a request to start aggregating is processed."
          }
        }
      },
      "presentationprofileresponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/presentationprofile"
        }
      },
      "presentationprofile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "InActive"
            ]
          },
          "videoSource": {
            "type": "string"
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "deviceId": {
                  "type": "string"
                },
                "deviceName": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "isActive": {
                  "type": "boolean"
                },
                "streams": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "commentRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The text of the comment"
          },
          "userName": {
            "type": "string",
            "description": "Username submitting the comment. This user must exist in Rev. Unless the user has been assigned the Account Admin role, this user must also match the authenticated user making the API call."
          }
        }
      },
      "userVideoCompletionStatus": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "videoId": {
            "type": "string"
          },
          "completed": {
            "type": "boolean"
          },
          "whenCompleted": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "searchResponse": {
        "type": "object",
        "properties": {
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchVideoItem"
            }
          },
          "totalVideos": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "statusDescription": {
            "type": "string"
          }
        }
      },
      "searchVideoItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thumbnailUrl": {
            "type": "string"
          },
          "playbackUrl": {
            "type": "string"
          },
          "duration": {
            "type": "string"
          },
          "viewCount": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "approvalStatus": {
            "type": "string"
          },
          "approvalProcessName": {
            "type": "string"
          },
          "approvalProcessStepName": {
            "type": "string"
          },
          "approvalProcessStepNumber": {
            "type": "integer"
          },
          "approvalProcessStepsCount": {
            "type": "integer"
          },
          "uploader": {
            "type": "string"
          },
          "uploadedBy": {
            "type": "string"
          },
          "whenUploaded": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "fullname": {
                "type": "string"
              }
            }
          },
          "lastViewed": {
            "type": "string",
            "format": "date-time"
          },
          "averageRating": {
            "type": "number"
          },
          "ratingsCount": {
            "type": "integer"
          },
          "speechResult": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SpeechResultItem"
            }
          },
          "unlisted": {
            "type": "boolean"
          },
          "whenModified": {
            "type": "string",
            "format": "date-time"
          },
          "whenPublished": {
            "type": "string",
            "format": "date-time"
          },
          "commentCount": {
            "type": "integer"
          },
          "score": {
            "type": "number"
          }
        }
      },
      "SpeechResultItem": {
        "type": "object",
        "properties": {
          "time": {
            "type": "string",
            "format": "double"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "accessTokenRequest": {
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string",
            "description": "Value of XXX for initial request and extend session"
          },
          "apiKey": {
            "type": "string",
            "description": "Configured in the Rev client"
          },
          "grantType": {
            "type": "string",
            "description": "The value should be set to <code>authorization_code</code> for the initial session request and set to <code>refresh_token</code> to extend an existing session"
          },
          "redirectUri": {
            "type": "string",
            "description": "URL of web page to load after Rev credentials have been entered by the user. This page is where the final authentication steps will be performed and from which all subsequent API calls may be made. This value must be URL encoded."
          },
          "refreshToken": {
            "type": "string",
            "description": "Not applicable for initial request and can be omitted. After the initial request this value must be present and the value returned from the initial call for session extension. This value may remain the same for a given session and can be used repeatedly in extend session requests as long as the session remains valid. Each extend session generates a new accessToken value therefore the full authorization string must be recalculated after each extend session request before using in subsequent API calls."
          }
        }
      },
      "accessTokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The Vbrick access token to identify user which will be used for API calls"
          },
          "refreshToken": {
            "type": "string",
            "description": "The refresh token that can be used to refresh an access_token when it expires."
          },
          "userId": {
            "type": "string",
            "description": "User Id."
          },
          "expiration": {
            "type": "string",
            "description": "Token expiration time in seconds",
            "format": "date-time"
          },
          "issuedBy": {
            "type": "string",
            "description": "The Token issuer, Vbrick here."
          }
        }
      },
      "userRoleEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "searchUserAccessEntityItem": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "EntityType": {
            "type": "string"
          }
        }
      },
      "SupplementFilesDetails": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupplementFileItem"
            }
          }
        }
      },
      "SupplementFileItem": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Data object of supplemental file details attached to the video. Multiple files can be assigned."
          }
        }
      },
      "TranscriptionFilesDetails": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TranscriptionFileItem"
            }
          }
        }
      },
      "TranscriptionFileItem": {
        "type": "object",
        "description": "Transcription files metadata object. Field name is TranscriptionFiles. <p>Only .srt or .vtt files should be uploaded.</p><p>View <a href=/docs/supported-languages>Supported Languages</a> in the Technical Requirements guide for ongoing updates and supported language codes.",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Filename of attached file payload. Must end with .srt or .vtt file extension"
          },
          "language": {
            "type": "string",
            "description": "Must be a supported language code"
          }
        }
      },
      "searchAccessEntityResponse": {
        "type": "object",
        "properties": {
          "accessEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/searchUserAccessEntityItem"
            }
          },
          "totalEntities": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer"
          },
          "statusDescription": {
            "type": "string"
          }
        }
      },
      "searchUserChannelsResponse": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "customMetadaResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the custom field in the system."
          },
          "name": {
            "type": "string",
            "description": "Name of the custom field in the system."
          },
          "fieldType": {
            "type": "string",
            "description": "Type of the custome field (Text/Select)."
          },
          "required": {
            "type": "boolean",
            "description": "Is custom field required in the system."
          },
          "displayedToUsers": {
            "type": "boolean",
            "description": "Is custom field dispalyed to user."
          },
          "enum": {
            "type": "string",
            "description": "Options of custom field to set in case of \"Select\" type."
          }
        }
      },
      "uploadCustomFields": {
        "type": "object",
        "description": "An array of customFields used in video/webcast endpoints. If the customField does not exist in Rev or invalid values are found for picklists, an error is returned. If values are not provided for a picklist and/or text field, they are not set (the endpoint proceeds). The <a href=/reference/custommetadata>Get Custom Fields</a> endpoint retrieves a list of custom fields.<p>Note: If a custom field is marked required in Rev, it <em>must</em> be provided in API call, otherwise it is optional. If it is required and not provided, the call is rejected. Picklist types must be valid.</p>",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the custom field in the system"
          },
          "value": {
            "type": "string",
            "description": "Value of the custom field"
          },
          "name": {
            "type": "string",
            "description": "Name of the custom field in rev. If id is not provided, custom field is looked up by name."
          }
        }
      },
      "apiCustomFields": {
        "type": "object",
        "description": "An array of customFields attached to the video. If the customField does not exist in Rev or invalid values found for picklist, the upload fails. If values are not provided for a picklist and/or text field, they are not set for the video but the upload proceeds. The <a href=/reference/custommetadata>Get Custom Fields</a> endpoint retrieves a list of custom fields.<p>Note: If custom field is marked required in Rev, it <em>must</em> be provided in API call, otherwise it is optional. If it is required and not provided, the upload is rejected. Picklist types must be valid.</p>",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the custom field in the system"
          },
          "name": {
            "type": "string",
            "description": "Name of the custom field in the system"
          },
          "value": {
            "type": "string",
            "description": "Value of the custom field in the system"
          },
          "required": {
            "type": "boolean",
            "description": "Is custom field required in the system"
          },
          "displayedToUsers": {
            "type": "boolean",
            "description": "Is custom field dispalyed to user"
          },
          "fieldType": {
            "type": "string",
            "description": "Type of the custom field (Text/Select)"
          }
        }
      },
      "categoryResponse": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parentCategory": {
            "type": "object",
            "properties": {
              "categoryId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "parentCategory": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "createCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of category to add"
          },
          "parentCategoryId": {
            "type": "string",
            "nullable": true,
            "description": "Id of parent category to add the category as a child category. If specified, the Id needs to exist in Rev."
          },
          "restricted": {
            "type": "boolean",
            "description": "When true, the category is restricted and only the users/groups in categoryPolicyItems may add or edit content in the category or modify the category itself."
          },
          "categoryPolicyItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryPolicyItem"
            }
          }
        }
      },
      "editCategory": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category to edit"
          },
          "restricted": {
            "type": "boolean",
            "description": "When true, the category is restricted and only the users/groups in categoryPolicyItems may add or edit content in the category or modify the category itself."
          },
          "categoryPolicyItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryPolicyItem"
            }
          }
        }
      },
      "getCategoryResponse": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Id of category"
          },
          "name": {
            "type": "string",
            "description": "Name of the category"
          },
          "parentCategoryId": {
            "type": "string",
            "nullable": true,
            "description": "Id of parent category with this category as child"
          },
          "restricted": {
            "type": "boolean"
          },
          "categoryPolicyItems": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/categoryPolicyItem"
            }
          }
        }
      },
      "linkedUrlMetadata": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "Url of the video to add to the system"
          },
          "EncodingType": {
            "type": "string",
            "description": "EncodingType of the video (H264/HLS/HDS/H264TS/Mpeg4/Mpeg2/WM/Flash/RTP)"
          },
          "Type": {
            "type": "string",
            "description": "Type of the video (Live/Vod)"
          },
          "IsMulticast": {
            "type": "boolean"
          }
        }
      },
      "createLinkVideoMetadata": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the video being uploaded. If title is not specified, API uses linked filename as the title."
          },
          "description": {
            "type": "string",
            "description": "Description is set to null if not specified"
          },
          "uploader": {
            "type": "string",
            "description": "This is the Rev username that identifies the user the video is attached to. If not specified, or the username does not exist in Rev, the link is rejected."
          },
          "owner": {
            "description": "Rev User the video is attached to. If the User does not exist in Rev, the request is rejected.",
            "$ref": "#/components/schemas/userAccessEntityRequest"
          },
          "categories": {
            "type": "array",
            "description": "An array of category names that is attached to the video. If no categories are specified, or the category does not exist in Rev, it is not attached. This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.<p>Note: You should only use category names OR categoryIds but <em>not</em> both.</p>",
            "items": {
              "type": "string"
            }
          },
          "categoryIds": {
            "type": "array",
            "description": "An array of category Ids that is attached to the video. If the category does not exist in Rev, the upload will fail. This array is provided through the video metadata file and obtained through the <a href=/reference/getcategories>Get Categories</a> endpoint.<p>Note: You should only use category names OR categoryIds but <em>not</em> both.</p>",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "An array of strings tagged to the video",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean",
            "description": "Default=false. Status of the video after it is uploaded."
          },
          "enableRatings": {
            "type": "boolean",
            "description": "Default=true. This enables or disables ratings for the uploaded video."
          },
          "enableDownloads": {
            "type": "boolean",
            "description": "Default=false. This enables or disables downloading of the video from Rev."
          },
          "enableComments": {
            "type": "boolean",
            "description": "Default=true. This enables or disables comments for the uploaded video."
          },
          "videoAccessControl": {
            "type": "string",
            "description": "This sets access control for the video. This is an enum and can have the following values: <code>Public/AllUsers/Private</code>. <p>A value of <strong>AllUsers</strong> is equal to all internal/authenticated users. A value of <strong>Private</strong> allows access to those Users, Groups, and Channels <em>explicitly</em> identified.</p><p> Be aware that you can assign multiple Users, Groups, and Channels in the <strong>accessControlEntites</strong> parameter in addition to the <strong>AllUser</strong> or <strong>Public</strong> settings. If no value is set, the default is <strong>Private</strong>.</p> <p>In the case of an incorrect value, the call is rejected with an HTTP 400 error.</p><p><strong>Note:</strong> If <strong>Channels</strong> is set at the videoAccessControl, it is translated to <strong>Private</strong> and a Channel <em>must</em> be specified in the accessControlEntities. If a Channel is included in the accessControlEntities, then the canEdit parameter is ignored.</p>",
            "enum": [
              "Public",
              "AllUsers",
              "Private"
            ]
          },
          "password": {
            "type": "string",
            "description": "A password for Public Video Access Control. Use this field when the videoAccessControl is set to Public. If not, this field is ignored."
          },
          "accessControlEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/apiAccessControlEntity"
            }
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/uploadCustomFields"
            }
          },
          "linkedUrl": {
            "$ref": "#/components/schemas/linkedUrlMetadata"
          }
        }
      },
      "oembedVideo": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          },
          "html": {
            "type": "string"
          },
          "thumbnail_height": {
            "type": "integer"
          },
          "thumbnail_width": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "eventReport": {
        "type": "object",
        "properties": {
          "browser": {
            "type": "string",
            "description": "Name of browser"
          },
          "deviceAccessed": {
            "type": "string",
            "description": "Name of device accessed"
          },
          "deviceType": {
            "type": "string",
            "description": "Type of device"
          },
          "email": {
            "type": "string",
            "description": "email of event viewer"
          },
          "enteredDate": {
            "type": "string",
            "description": "Event view Date",
            "format": "date-time"
          },
          "exitedDate": {
            "type": "string",
            "description": "Event exited Date",
            "format": "date-time"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP Address of viewer"
          },
          "isRemovedFromWebcast": {
            "type": "boolean",
            "description": "removed from webcast"
          },
          "name": {
            "type": "string",
            "description": "Name of viewer"
          },
          "streamAccessed": {
            "type": "string",
            "description": "Accessed stream"
          },
          "userName": {
            "type": "string",
            "description": "Name of user"
          },
          "userType": {
            "type": "string",
            "description": "Type of user"
          },
          "viewingTime": {
            "type": "string",
            "description": "Event exited Date"
          },
          "zone": {
            "type": "string",
            "description": "zone"
          }
        }
      },
      "createChannel": {
        "type": "object",
        "properties": {
          "channelId": {
            "type": "string"
          }
        }
      },
      "getChannelResponse": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "User",
                    "Group"
                  ]
                },
                "roleTypes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "Admin",
                      "Contributor",
                      "Member"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "startVcRecordingRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Name given to the video. Defaults to the SIP address if not provided."
          },
          "sipAddress": {
            "type": "string",
            "description": "SIP address for the video recording. Normally the conference room SIP address."
          },
          "sipPin": {
            "type": "string"
          }
        }
      },
      "startVCRecordingResponse": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string"
          }
        }
      },
      "stopVCRecordingRequest": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "description": "Id of video to stop recording"
          }
        }
      },
      "stopVCRecordingResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "vCRecordingStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          }
        }
      },
      "createGroup": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          }
        }
      },
      "getGroupResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "createZone": {
        "type": "object",
        "properties": {
          "zoneId": {
            "type": "string"
          }
        }
      },
      "getZones": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string"
          },
          "defaultZone": {
            "$ref": "#/components/schemas/defaultZone"
          },
          "zones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zone"
            }
          }
        }
      },
      "createOrEditZoneRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Zone name. Must be unique."
          },
          "parentZoneId": {
            "type": "string",
            "description": "Id of parent zone if creating a child zone"
          },
          "supportsMulticast": {
            "type": "boolean",
            "description": "Specify if the zone supports multicast streams"
          },
          "ipAddresses": {
            "type": "array",
            "description": "Individual Ip addresses added to the zone",
            "items": {
              "type": "string"
            }
          },
          "ipAddressRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ipAddressRange"
            }
          },
          "targetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "overrideAccountSlideDelay": {
            "type": "boolean",
            "description": "Specifies to override the account slide delay settings"
          },
          "slideDelaySeconds": {
            "type": "number",
            "description": "Slide delay in seconds"
          },
          "revConnectEnabled": {
            "type": "boolean",
            "description": "Designate the zone a Rev Connect zone"
          },
          "revConnectSetting": {
            "$ref": "#/components/schemas/revConnectSetting"
          }
        }
      },
      "zone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "parentZoneId": {
            "type": "string"
          },
          "ipAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ipAddressRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ipAddressRange"
            }
          },
          "targetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "childZones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zone"
            }
          },
          "supportsMulticast": {
            "type": "boolean"
          },
          "slideDelay": {
            "$ref": "#/components/schemas/zoneSlideDelay"
          },
          "revConnectEnabled": {
            "type": "boolean"
          },
          "revConnectSetting": {
            "$ref": "#/components/schemas/revConnectSetting"
          }
        }
      },
      "revConnectSetting": {
        "type": "object",
        "description": "When revConnectEnabled, add or edit a Rev Connect Zone.",
        "properties": {
          "disableFallback": {
            "type": "boolean",
            "description": "Disables fallback to a unicast stream (if available) which means the zone only supports multicast or Rev Connect."
          },
          "maxZoneMeshes": {
            "type": "integer",
            "description": "0; Defines the upper limit of what can be used within the zone based on licensing retrictions."
          },
          "groupPeersByZoneIPAddresses": {
            "type": "boolean"
          }
        }
      },
      "defaultZone": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "TargetDevices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zoneTargetDevice"
            }
          },
          "SupportsMulticast": {
            "type": "boolean"
          },
          "SlideDelay": {
            "$ref": "#/components/schemas/zoneSlideDelay"
          }
        }
      },
      "zoneDevicesResponse": {
        "type": "object",
        "properties": {
          "devices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/zonedevices"
            }
          }
        }
      },
      "zoneSlideDelay": {
        "type": "object",
        "properties": {
          "overrideAccount": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "delaySeconds": {
            "type": "integer"
          }
        }
      },
      "ipAddressRange": {
        "type": "object",
        "description": "A range of Ip addresses",
        "properties": {
          "start": {
            "type": "string",
            "description": "Starting Ip address for the range"
          },
          "end": {
            "type": "string",
            "description": "Ending Ip address for the range"
          }
        }
      },
      "zoneTargetDevice": {
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string",
            "description": "Possible settings can be 'Custom', 'Encoder', 'Dme', 'Akamai'"
          },
          "deviceId": {
            "type": "string",
            "description": "Device Id of target device"
          },
          "isActive": {
            "type": "boolean",
            "description": "Status of target device"
          },
          "liveOnly": {
            "type": "boolean",
            "description": "Specifies if no VOD videos retrieved if true"
          },
          "streams": {
            "type": "array",
            "description": "Rev stream names added to the zone from this device",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "zonedevices": {
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string",
            "enum": [
              "Dme",
              "Akamai",
              "AkamaiLive",
              "Custom",
              "Encoder"
            ]
          },
          "id": {
            "type": "string"
          },
          "isVideoStorageDevice": {
            "type": "boolean"
          },
          "macAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "prepositionContent": {
            "type": "boolean"
          },
          "healthStatus": {
            "type": "string",
            "enum": [
              "Uninitialized",
              "Initializing",
              "Healthy",
              "Warning",
              "Error",
              "Updating",
              "Normal",
              "Caution",
              "Alert"
            ]
          },
          "videoStreams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "url": {
                  "type": "string"
                },
                "encodingType": {
                  "description": "EncodingType of the stream (H264/HLS/HDS/H264TS/Flash/RTP)",
                  "type": "string"
                },
                "isMulticast": {
                  "type": "boolean"
                },
                "isVbrickMulticast": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "groupMembership": {
        "type": "object",
        "properties": {
          "totalUsers": {
            "type": "integer"
          },
          "scrollId": {
            "type": "string"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "errorModel": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          }
        }
      },
      "channelRequest": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Required. Name of the Channel, must be unique."
          },
          "description": {
            "type": "string",
            "description": "Description of Channel to create."
          },
          "members": {
            "description": "Users/groups to add as channel members. Includes a flag to indicate if a member is acting as a channel administrator.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/channelMember"
            }
          }
        }
      },
      "channelMember": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User or Group id"
          },
          "type": {
            "type": "string",
            "description": "Indicates if a channel member is a user or a group entity"
          },
          "roleTypes": {
            "type": "array",
            "description": "Indicates if a user or group is a Channel Administrator, Channel Contributor or Channel Member. When used, 'isAdmin' is ignored.",
            "items": {
              "type": "string",
              "enum": [
                "Admin",
                "Contributor",
                "Member"
              ]
            }
          }
        }
      },
      "createPlaylist": {
        "type": "object",
        "properties": {
          "playlistId": {
            "type": "string"
          }
        }
      },
      "PlaylistVideoDetails": {
        "type": "object",
        "properties": {
          "videoId": {
            "type": "string",
            "description": "Video Ids to edit in the playlist"
          },
          "action": {
            "type": "string",
            "description": "Action to be taken - Add or Remove.",
            "enum": [
              "Add",
              "Remove"
            ]
          }
        }
      },
      "getPlaylists": {
        "type": "object",
        "properties": {
          "featuredPlaylist": {
            "type": "object",
            "properties": {
              "featurePlaylistId": {
                "type": "string"
              },
              "playbackUrl": {
                "type": "string"
              },
              "Videos": {
                "type": "object",
                "properties": {
                  "videoId": {
                    "type": "string"
                  },
                  "videoTitle": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "Playlists": {
            "type": "object",
            "properties": {
              "playlistId": {
                "type": "string"
              },
              "playlistName": {
                "type": "string"
              },
              "playbackUrl": {
                "type": "string"
              },
              "Videos": {
                "type": "object",
                "properties": {
                  "videoId": {
                    "type": "string"
                  },
                  "videoTitle": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "userLoginReportResponse": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string"
          },
          "FullName": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "LastLogin": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "brandingSettingsResponse": {
        "type": "object",
        "properties": {
          "general": {
            "type": "object",
            "properties": {
              "PrimaryColor": {
                "type": "string"
              },
              "PrimaryFontColor": {
                "type": "string"
              },
              "AccentColor": {
                "type": "string"
              },
              "AccentFontColor": {
                "type": "string"
              },
              "LogoUri": {
                "type": "string"
              }
            }
          },
          "header": {
            "type": "object",
            "properties": {
              "BackgroundColor": {
                "type": "string"
              },
              "FontColor": {
                "type": "string"
              }
            }
          }
        }
      },
      "startScheduledRecordingRequest": {
        "required": [
          "presentationProfileId"
        ],
        "type": "object",
        "properties": {
          "presentationProfileId": {
            "type": "string"
          },
          "useAccountRecordingDevice": {
            "type": "boolean",
            "description": "Default: false.  <p>If false, a DME defined in the presentation profile is used as the recording device. If true, the account primary/secondary recording device is used.</p>"
          },
          "startDate": {
            "type": "string",
            "description": "Start date/time in UTC.  <p>Default: current date/time. If not specified, current time is used. Example: <code>2018-05-21T20:20:00Z</code></p>",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date/time in UTC. Default: 2 hours after the startDate.  <p>The default duration (2 hours) is a configurable system setting.  The max duration is 10 hours by default.  Example: <code>2018-05-21T20:20:00Z</code></p>",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "description": "The title of the recording.  <p>Default: the presentation profile name.</p>"
          }
        }
      },
      "startScheduledRecordingResponse": {
        "type": "object",
        "properties": {
          "scheduledRecordingId": {
            "type": "string"
          }
        }
      },
      "stopScheduledRecordingResponse": {
        "type": "object",
        "properties": {
          "recordingVideoId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "stopping",
              "cancelled",
              "stopped"
            ]
          }
        }
      },
      "scheduledRecordingStatusResponse": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "scheduled",
              "starting",
              "recording",
              "stopping",
              "stopped",
              "cancelled",
              "failed"
            ]
          }
        }
      },
      "auditResponse": {
        "type": "object",
        "properties": {
          "general": {
            "type": "object",
            "properties": {
              "messageKey": {
                "type": "string"
              },
              "entityKey": {
                "type": "string"
              },
              "entityId": {
                "type": "string"
              },
              "when": {
                "type": "string",
                "format": "date-time"
              },
              "principal": {
                "type": "string"
              },
              "previousState": {
                "type": "string"
              },
              "currentState": {
                "type": "string"
              }
            }
          },
          "header": {
            "type": "object",
            "properties": {
              "totalRecords": {
                "type": "integer"
              },
              "nextFromDate": {
                "type": "string",
                "format": "date-time"
              },
              "nextContinuationToken": {
                "type": "string"
              }
            }
          }
        }
      },
      "iqCreditsUsageSearchResponse": {
        "type": "object",
        "properties": {
          "scrollId": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "sessions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ResourceId": {
                  "type": "string",
                  "description": "Video or Webcast Id."
                },
                "ResourceType": {
                  "type": "string",
                  "description": "Indicates the type of resource the initiated the IQ credits. Possible value: Video or Webcast."
                },
                "Title": {
                  "type": "string",
                  "description": "Resource title."
                },
                "Duration": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Resource duration."
                },
                "Initiator": {
                  "type": "object",
                  "description": "User who initiated the transaction.",
                  "properties": {
                    "UserId": {
                      "type": "string"
                    },
                    "FirstName": {
                      "type": "string"
                    },
                    "LastName": {
                      "type": "string"
                    },
                    "FullName": {
                      "type": "string"
                    },
                    "Username": {
                      "type": "string"
                    }
                  }
                },
                "Creator": {
                  "type": "object",
                  "description": "User who created the resource. For webcasts, user who created it. For videos, user who uploaded it.",
                  "properties": {
                    "UserId": {
                      "type": "string"
                    },
                    "FirstName": {
                      "type": "string"
                    },
                    "LastName": {
                      "type": "string"
                    },
                    "FullName": {
                      "type": "string"
                    },
                    "Username": {
                      "type": "string"
                    }
                  }
                },
                "Usage": {
                  "type": "string",
                  "description": "Type of transaction that initiated the IQ credits. Possible values: Transcription, Translation, UserTagging."
                },
                "Credits": {
                  "type": "number",
                  "description": "Amount of IQ credit used."
                },
                "Languages": {
                  "type": "array",
                  "description": "Target languages used when the resource was transcribed or translated. Does not apply for UserTagging.",
                  "items": {
                    "type": "string"
                  }
                },
                "When": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the transaction occured."
                }
              }
            }
          }
        }
      },
      "webcastRegistrationField": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "FieldType": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          },
          "Options": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "IncludeInAllWebcasts": {
            "type": "boolean"
          }
        }
      },
      "registrationFieldsAnswers": {
        "type": "object",
        "description": "RegistrationFields used in webcast endpoints. If the registrationFields does not exist in Rev or invalid values are found for picklists, an error is returned. If values are not provided for a picklist and/or text field, they are not set (the endpoint proceeds).<p>Note: If a webcast registration field  is marked required in Rev, it <em>must</em> be provided in API call, otherwise it is optional. If it is required and not provided, the call is rejected. Picklist types must be valid.</p>",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the registration field in rev."
          },
          "name": {
            "type": "string",
            "description": "Name of the registration field in rev."
          },
          "value": {
            "type": "string",
            "description": "Value of the registration field."
          }
        }
      },
      "createOrUpdateWebcastRegistrationField": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the custom registration field is displayed to users"
          },
          "FieldType": {
            "type": "string",
            "description": "Type of field. Can be <code>Text</code> or <code>Select</code>."
          },
          "Required": {
            "type": "boolean",
            "description": "Default=false. Specifies whether the registrant is required to complete the field when registering for the event."
          },
          "Options": {
            "type": "array",
            "description": "Field values when FieldType=<code>picklist</code>.  Required if FieldType=<code>picklist</code>.",
            "items": {
              "type": "string"
            }
          },
          "IncludeInAllWebcasts": {
            "type": "boolean",
            "description": "Default=false. Specifies if the field is included in each public Webcast that is created."
          }
        }
      },
      "addEventQuestionRequest": {
        "type": "object",
        "properties": {
          "QuestionText": {
            "type": "string",
            "description": "Question text to add"
          },
          "ExternalId": {
            "type": "string",
            "description": "External questionId if any are in external system. Default is blank."
          },
          "AskedBy": {
            "$ref": "#/components/schemas/userEntity"
          },
          "IsAnonymous": {
            "type": "boolean",
            "description": "Default=false. When true, question is set to anonymous."
          },
          "WhenAsked": {
            "type": "string",
            "description": "Timestamp when question is asked",
            "format": "date-time"
          }
        }
      },
      "addEventAnswerRequest": {
        "type": "object",
        "properties": {
          "AnswerText": {
            "type": "string",
            "description": "Answer text to add"
          },
          "CloseReason": {
            "type": "string",
            "description": "The reason the question is closed. Values include [Declined, FollowUp, Answered, RepliedDirectly]",
            "enum": [
              "Declined",
              "FollowUp",
              "Answered",
              "RepliedDirectly"
            ]
          },
          "AnsweredBy": {
            "$ref": "#/components/schemas/userEntity"
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Default=true. Specifies if the answer is Private or Public."
          },
          "WhenAnswered": {
            "type": "string",
            "description": "Timestamp when the question is answered",
            "format": "date-time"
          }
        }
      },
      "userEntity": {
        "type": "object",
        "description": "The user that asks/answers a question. Defaults to the authenticated API user. If specified, the user must have at least view permission on the Webcast (Attendee, Account Admin, Moderator, or Host).",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          }
        }
      },
      "addQuestionResponse": {
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string"
          }
        }
      },
      "getMaintenanceScheduleResponse": {
        "type": "array",
        "description": "List of maintenance window",
        "items": {
          "type": "object",
          "properties": {
            "start": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the maintenance is to start."
            },
            "end": {
              "type": "string",
              "format": "date-time",
              "description": "Date and time when the maintenance is to end."
            }
          }
        }
      },
      "groups": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Group Id"
            },
            "name": {
              "type": "string",
              "description": "Group Name"
            },
            "roleIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "group": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Name of the Group."
          },
          "groupId": {
            "type": "string",
            "description": "Id of the Group"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Role Id."
                },
                "name": {
                  "type": "string",
                  "description": "Role name."
                }
              }
            }
          }
        }
      },
      "getJwtEncryptionKeys": {
        "type": "object",
        "properties": {
          "encryptionKeys": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Public key text"
                },
                "keyId": {
                  "type": "string",
                  "description": "Id of the key"
                },
                "validUntil": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date until key is valid. Only if the key is in rotation."
                }
              }
            }
          }
        }
      }
    }
  }
}